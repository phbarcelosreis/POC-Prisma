
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export interface PrismaPromise<A> extends Promise<A> {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model cakes
 * 
 */
export type cakes = {
  id: number
  name: string
  price: number
  image: string
  description: string | null
}

/**
 * Model clients
 * 
 */
export type clients = {
  id: number
  name: string
  address: string
  phone: string
}

/**
 * Model newClients
 * 
 */
export type newClients = {
  id: number
  name: string
  address: string
}

/**
 * Model newOrders
 * 
 */
export type newOrders = {
  id: number
  clientId: number
  productsId: number
  quantity: number
  createdAt: Date
  totalPrice: Prisma.Decimal
}

/**
 * Model orders
 * 
 */
export type orders = {
  id: number
  clientId: number
  cakeId: number
  quantity: number
  createdAt: Date
  totalPrice: number
}

/**
 * Model products
 * 
 */
export type products = {
  id: number
  name: string
  price: number
  description: string | null
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Cakes
 * const cakes = await prisma.cakes.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Cakes
   * const cakes = await prisma.cakes.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Prisma.TransactionClient) => Promise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<R>

      /**
   * `prisma.cakes`: Exposes CRUD operations for the **cakes** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Cakes
    * const cakes = await prisma.cakes.findMany()
    * ```
    */
  get cakes(): Prisma.cakesDelegate<GlobalReject>;

  /**
   * `prisma.clients`: Exposes CRUD operations for the **clients** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Clients
    * const clients = await prisma.clients.findMany()
    * ```
    */
  get clients(): Prisma.clientsDelegate<GlobalReject>;

  /**
   * `prisma.newClients`: Exposes CRUD operations for the **newClients** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more NewClients
    * const newClients = await prisma.newClients.findMany()
    * ```
    */
  get newClients(): Prisma.newClientsDelegate<GlobalReject>;

  /**
   * `prisma.newOrders`: Exposes CRUD operations for the **newOrders** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more NewOrders
    * const newOrders = await prisma.newOrders.findMany()
    * ```
    */
  get newOrders(): Prisma.newOrdersDelegate<GlobalReject>;

  /**
   * `prisma.orders`: Exposes CRUD operations for the **orders** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Orders
    * const orders = await prisma.orders.findMany()
    * ```
    */
  get orders(): Prisma.ordersDelegate<GlobalReject>;

  /**
   * `prisma.products`: Exposes CRUD operations for the **products** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Products
    * const products = await prisma.products.findMany()
    * ```
    */
  get products(): Prisma.productsDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket


  /**
   * Prisma Client JS version: 4.9.0
   * Query Engine version: ceb5c99003b99c9ee2c1d2e618e359c14aef2ea5
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: runtime.Types.Utils.LegacyExact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    cakes: 'cakes',
    clients: 'clients',
    newClients: 'newClients',
    newOrders: 'newOrders',
    orders: 'orders',
    products: 'products'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type DefaultPrismaClient = PrismaClient
  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, '$connect' | '$disconnect' | '$on' | '$transaction' | '$use'>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type ClientsCountOutputType
   */


  export type ClientsCountOutputType = {
    orders: number
  }

  export type ClientsCountOutputTypeSelect = {
    orders?: boolean
  }

  export type ClientsCountOutputTypeGetPayload<S extends boolean | null | undefined | ClientsCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? ClientsCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (ClientsCountOutputTypeArgs)
    ? ClientsCountOutputType 
    : S extends { select: any } & (ClientsCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof ClientsCountOutputType ? ClientsCountOutputType[P] : never
  } 
      : ClientsCountOutputType




  // Custom InputTypes

  /**
   * ClientsCountOutputType without action
   */
  export type ClientsCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the ClientsCountOutputType
     */
    select?: ClientsCountOutputTypeSelect | null
  }



  /**
   * Count Type NewClientsCountOutputType
   */


  export type NewClientsCountOutputType = {
    newOrders: number
  }

  export type NewClientsCountOutputTypeSelect = {
    newOrders?: boolean
  }

  export type NewClientsCountOutputTypeGetPayload<S extends boolean | null | undefined | NewClientsCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? NewClientsCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (NewClientsCountOutputTypeArgs)
    ? NewClientsCountOutputType 
    : S extends { select: any } & (NewClientsCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof NewClientsCountOutputType ? NewClientsCountOutputType[P] : never
  } 
      : NewClientsCountOutputType




  // Custom InputTypes

  /**
   * NewClientsCountOutputType without action
   */
  export type NewClientsCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the NewClientsCountOutputType
     */
    select?: NewClientsCountOutputTypeSelect | null
  }



  /**
   * Count Type ProductsCountOutputType
   */


  export type ProductsCountOutputType = {
    newOrders: number
  }

  export type ProductsCountOutputTypeSelect = {
    newOrders?: boolean
  }

  export type ProductsCountOutputTypeGetPayload<S extends boolean | null | undefined | ProductsCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? ProductsCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (ProductsCountOutputTypeArgs)
    ? ProductsCountOutputType 
    : S extends { select: any } & (ProductsCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof ProductsCountOutputType ? ProductsCountOutputType[P] : never
  } 
      : ProductsCountOutputType




  // Custom InputTypes

  /**
   * ProductsCountOutputType without action
   */
  export type ProductsCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the ProductsCountOutputType
     */
    select?: ProductsCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model cakes
   */


  export type AggregateCakes = {
    _count: CakesCountAggregateOutputType | null
    _avg: CakesAvgAggregateOutputType | null
    _sum: CakesSumAggregateOutputType | null
    _min: CakesMinAggregateOutputType | null
    _max: CakesMaxAggregateOutputType | null
  }

  export type CakesAvgAggregateOutputType = {
    id: number | null
    price: number | null
  }

  export type CakesSumAggregateOutputType = {
    id: number | null
    price: number | null
  }

  export type CakesMinAggregateOutputType = {
    id: number | null
    name: string | null
    price: number | null
    image: string | null
    description: string | null
  }

  export type CakesMaxAggregateOutputType = {
    id: number | null
    name: string | null
    price: number | null
    image: string | null
    description: string | null
  }

  export type CakesCountAggregateOutputType = {
    id: number
    name: number
    price: number
    image: number
    description: number
    _all: number
  }


  export type CakesAvgAggregateInputType = {
    id?: true
    price?: true
  }

  export type CakesSumAggregateInputType = {
    id?: true
    price?: true
  }

  export type CakesMinAggregateInputType = {
    id?: true
    name?: true
    price?: true
    image?: true
    description?: true
  }

  export type CakesMaxAggregateInputType = {
    id?: true
    name?: true
    price?: true
    image?: true
    description?: true
  }

  export type CakesCountAggregateInputType = {
    id?: true
    name?: true
    price?: true
    image?: true
    description?: true
    _all?: true
  }

  export type CakesAggregateArgs = {
    /**
     * Filter which cakes to aggregate.
     */
    where?: cakesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of cakes to fetch.
     */
    orderBy?: Enumerable<cakesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: cakesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` cakes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` cakes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned cakes
    **/
    _count?: true | CakesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CakesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CakesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CakesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CakesMaxAggregateInputType
  }

  export type GetCakesAggregateType<T extends CakesAggregateArgs> = {
        [P in keyof T & keyof AggregateCakes]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCakes[P]>
      : GetScalarType<T[P], AggregateCakes[P]>
  }




  export type CakesGroupByArgs = {
    where?: cakesWhereInput
    orderBy?: Enumerable<cakesOrderByWithAggregationInput>
    by: CakesScalarFieldEnum[]
    having?: cakesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CakesCountAggregateInputType | true
    _avg?: CakesAvgAggregateInputType
    _sum?: CakesSumAggregateInputType
    _min?: CakesMinAggregateInputType
    _max?: CakesMaxAggregateInputType
  }


  export type CakesGroupByOutputType = {
    id: number
    name: string
    price: number
    image: string
    description: string | null
    _count: CakesCountAggregateOutputType | null
    _avg: CakesAvgAggregateOutputType | null
    _sum: CakesSumAggregateOutputType | null
    _min: CakesMinAggregateOutputType | null
    _max: CakesMaxAggregateOutputType | null
  }

  type GetCakesGroupByPayload<T extends CakesGroupByArgs> = PrismaPromise<
    Array<
      PickArray<CakesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CakesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CakesGroupByOutputType[P]>
            : GetScalarType<T[P], CakesGroupByOutputType[P]>
        }
      >
    >


  export type cakesSelect = {
    id?: boolean
    name?: boolean
    price?: boolean
    image?: boolean
    description?: boolean
  }


  export type cakesGetPayload<S extends boolean | null | undefined | cakesArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? cakes :
    S extends undefined ? never :
    S extends { include: any } & (cakesArgs | cakesFindManyArgs)
    ? cakes 
    : S extends { select: any } & (cakesArgs | cakesFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof cakes ? cakes[P] : never
  } 
      : cakes


  type cakesCountArgs = 
    Omit<cakesFindManyArgs, 'select' | 'include'> & {
      select?: CakesCountAggregateInputType | true
    }

  export interface cakesDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Cakes that matches the filter.
     * @param {cakesFindUniqueArgs} args - Arguments to find a Cakes
     * @example
     * // Get one Cakes
     * const cakes = await prisma.cakes.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends cakesFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, cakesFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'cakes'> extends True ? Prisma__cakesClient<cakesGetPayload<T>> : Prisma__cakesClient<cakesGetPayload<T> | null, null>

    /**
     * Find one Cakes that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {cakesFindUniqueOrThrowArgs} args - Arguments to find a Cakes
     * @example
     * // Get one Cakes
     * const cakes = await prisma.cakes.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends cakesFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, cakesFindUniqueOrThrowArgs>
    ): Prisma__cakesClient<cakesGetPayload<T>>

    /**
     * Find the first Cakes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cakesFindFirstArgs} args - Arguments to find a Cakes
     * @example
     * // Get one Cakes
     * const cakes = await prisma.cakes.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends cakesFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, cakesFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'cakes'> extends True ? Prisma__cakesClient<cakesGetPayload<T>> : Prisma__cakesClient<cakesGetPayload<T> | null, null>

    /**
     * Find the first Cakes that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cakesFindFirstOrThrowArgs} args - Arguments to find a Cakes
     * @example
     * // Get one Cakes
     * const cakes = await prisma.cakes.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends cakesFindFirstOrThrowArgs>(
      args?: SelectSubset<T, cakesFindFirstOrThrowArgs>
    ): Prisma__cakesClient<cakesGetPayload<T>>

    /**
     * Find zero or more Cakes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cakesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Cakes
     * const cakes = await prisma.cakes.findMany()
     * 
     * // Get first 10 Cakes
     * const cakes = await prisma.cakes.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const cakesWithIdOnly = await prisma.cakes.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends cakesFindManyArgs>(
      args?: SelectSubset<T, cakesFindManyArgs>
    ): PrismaPromise<Array<cakesGetPayload<T>>>

    /**
     * Create a Cakes.
     * @param {cakesCreateArgs} args - Arguments to create a Cakes.
     * @example
     * // Create one Cakes
     * const Cakes = await prisma.cakes.create({
     *   data: {
     *     // ... data to create a Cakes
     *   }
     * })
     * 
    **/
    create<T extends cakesCreateArgs>(
      args: SelectSubset<T, cakesCreateArgs>
    ): Prisma__cakesClient<cakesGetPayload<T>>

    /**
     * Create many Cakes.
     *     @param {cakesCreateManyArgs} args - Arguments to create many Cakes.
     *     @example
     *     // Create many Cakes
     *     const cakes = await prisma.cakes.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends cakesCreateManyArgs>(
      args?: SelectSubset<T, cakesCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Cakes.
     * @param {cakesDeleteArgs} args - Arguments to delete one Cakes.
     * @example
     * // Delete one Cakes
     * const Cakes = await prisma.cakes.delete({
     *   where: {
     *     // ... filter to delete one Cakes
     *   }
     * })
     * 
    **/
    delete<T extends cakesDeleteArgs>(
      args: SelectSubset<T, cakesDeleteArgs>
    ): Prisma__cakesClient<cakesGetPayload<T>>

    /**
     * Update one Cakes.
     * @param {cakesUpdateArgs} args - Arguments to update one Cakes.
     * @example
     * // Update one Cakes
     * const cakes = await prisma.cakes.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends cakesUpdateArgs>(
      args: SelectSubset<T, cakesUpdateArgs>
    ): Prisma__cakesClient<cakesGetPayload<T>>

    /**
     * Delete zero or more Cakes.
     * @param {cakesDeleteManyArgs} args - Arguments to filter Cakes to delete.
     * @example
     * // Delete a few Cakes
     * const { count } = await prisma.cakes.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends cakesDeleteManyArgs>(
      args?: SelectSubset<T, cakesDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Cakes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cakesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Cakes
     * const cakes = await prisma.cakes.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends cakesUpdateManyArgs>(
      args: SelectSubset<T, cakesUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Cakes.
     * @param {cakesUpsertArgs} args - Arguments to update or create a Cakes.
     * @example
     * // Update or create a Cakes
     * const cakes = await prisma.cakes.upsert({
     *   create: {
     *     // ... data to create a Cakes
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Cakes we want to update
     *   }
     * })
    **/
    upsert<T extends cakesUpsertArgs>(
      args: SelectSubset<T, cakesUpsertArgs>
    ): Prisma__cakesClient<cakesGetPayload<T>>

    /**
     * Count the number of Cakes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cakesCountArgs} args - Arguments to filter Cakes to count.
     * @example
     * // Count the number of Cakes
     * const count = await prisma.cakes.count({
     *   where: {
     *     // ... the filter for the Cakes we want to count
     *   }
     * })
    **/
    count<T extends cakesCountArgs>(
      args?: Subset<T, cakesCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CakesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Cakes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CakesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CakesAggregateArgs>(args: Subset<T, CakesAggregateArgs>): PrismaPromise<GetCakesAggregateType<T>>

    /**
     * Group by Cakes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CakesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CakesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CakesGroupByArgs['orderBy'] }
        : { orderBy?: CakesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CakesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCakesGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for cakes.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__cakesClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * cakes base type for findUnique actions
   */
  export type cakesFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the cakes
     */
    select?: cakesSelect | null
    /**
     * Filter, which cakes to fetch.
     */
    where: cakesWhereUniqueInput
  }

  /**
   * cakes findUnique
   */
  export interface cakesFindUniqueArgs extends cakesFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * cakes findUniqueOrThrow
   */
  export type cakesFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the cakes
     */
    select?: cakesSelect | null
    /**
     * Filter, which cakes to fetch.
     */
    where: cakesWhereUniqueInput
  }


  /**
   * cakes base type for findFirst actions
   */
  export type cakesFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the cakes
     */
    select?: cakesSelect | null
    /**
     * Filter, which cakes to fetch.
     */
    where?: cakesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of cakes to fetch.
     */
    orderBy?: Enumerable<cakesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for cakes.
     */
    cursor?: cakesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` cakes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` cakes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of cakes.
     */
    distinct?: Enumerable<CakesScalarFieldEnum>
  }

  /**
   * cakes findFirst
   */
  export interface cakesFindFirstArgs extends cakesFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * cakes findFirstOrThrow
   */
  export type cakesFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the cakes
     */
    select?: cakesSelect | null
    /**
     * Filter, which cakes to fetch.
     */
    where?: cakesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of cakes to fetch.
     */
    orderBy?: Enumerable<cakesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for cakes.
     */
    cursor?: cakesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` cakes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` cakes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of cakes.
     */
    distinct?: Enumerable<CakesScalarFieldEnum>
  }


  /**
   * cakes findMany
   */
  export type cakesFindManyArgs = {
    /**
     * Select specific fields to fetch from the cakes
     */
    select?: cakesSelect | null
    /**
     * Filter, which cakes to fetch.
     */
    where?: cakesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of cakes to fetch.
     */
    orderBy?: Enumerable<cakesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing cakes.
     */
    cursor?: cakesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` cakes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` cakes.
     */
    skip?: number
    distinct?: Enumerable<CakesScalarFieldEnum>
  }


  /**
   * cakes create
   */
  export type cakesCreateArgs = {
    /**
     * Select specific fields to fetch from the cakes
     */
    select?: cakesSelect | null
    /**
     * The data needed to create a cakes.
     */
    data: XOR<cakesCreateInput, cakesUncheckedCreateInput>
  }


  /**
   * cakes createMany
   */
  export type cakesCreateManyArgs = {
    /**
     * The data used to create many cakes.
     */
    data: Enumerable<cakesCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * cakes update
   */
  export type cakesUpdateArgs = {
    /**
     * Select specific fields to fetch from the cakes
     */
    select?: cakesSelect | null
    /**
     * The data needed to update a cakes.
     */
    data: XOR<cakesUpdateInput, cakesUncheckedUpdateInput>
    /**
     * Choose, which cakes to update.
     */
    where: cakesWhereUniqueInput
  }


  /**
   * cakes updateMany
   */
  export type cakesUpdateManyArgs = {
    /**
     * The data used to update cakes.
     */
    data: XOR<cakesUpdateManyMutationInput, cakesUncheckedUpdateManyInput>
    /**
     * Filter which cakes to update
     */
    where?: cakesWhereInput
  }


  /**
   * cakes upsert
   */
  export type cakesUpsertArgs = {
    /**
     * Select specific fields to fetch from the cakes
     */
    select?: cakesSelect | null
    /**
     * The filter to search for the cakes to update in case it exists.
     */
    where: cakesWhereUniqueInput
    /**
     * In case the cakes found by the `where` argument doesn't exist, create a new cakes with this data.
     */
    create: XOR<cakesCreateInput, cakesUncheckedCreateInput>
    /**
     * In case the cakes was found with the provided `where` argument, update it with this data.
     */
    update: XOR<cakesUpdateInput, cakesUncheckedUpdateInput>
  }


  /**
   * cakes delete
   */
  export type cakesDeleteArgs = {
    /**
     * Select specific fields to fetch from the cakes
     */
    select?: cakesSelect | null
    /**
     * Filter which cakes to delete.
     */
    where: cakesWhereUniqueInput
  }


  /**
   * cakes deleteMany
   */
  export type cakesDeleteManyArgs = {
    /**
     * Filter which cakes to delete
     */
    where?: cakesWhereInput
  }


  /**
   * cakes without action
   */
  export type cakesArgs = {
    /**
     * Select specific fields to fetch from the cakes
     */
    select?: cakesSelect | null
  }



  /**
   * Model clients
   */


  export type AggregateClients = {
    _count: ClientsCountAggregateOutputType | null
    _avg: ClientsAvgAggregateOutputType | null
    _sum: ClientsSumAggregateOutputType | null
    _min: ClientsMinAggregateOutputType | null
    _max: ClientsMaxAggregateOutputType | null
  }

  export type ClientsAvgAggregateOutputType = {
    id: number | null
  }

  export type ClientsSumAggregateOutputType = {
    id: number | null
  }

  export type ClientsMinAggregateOutputType = {
    id: number | null
    name: string | null
    address: string | null
    phone: string | null
  }

  export type ClientsMaxAggregateOutputType = {
    id: number | null
    name: string | null
    address: string | null
    phone: string | null
  }

  export type ClientsCountAggregateOutputType = {
    id: number
    name: number
    address: number
    phone: number
    _all: number
  }


  export type ClientsAvgAggregateInputType = {
    id?: true
  }

  export type ClientsSumAggregateInputType = {
    id?: true
  }

  export type ClientsMinAggregateInputType = {
    id?: true
    name?: true
    address?: true
    phone?: true
  }

  export type ClientsMaxAggregateInputType = {
    id?: true
    name?: true
    address?: true
    phone?: true
  }

  export type ClientsCountAggregateInputType = {
    id?: true
    name?: true
    address?: true
    phone?: true
    _all?: true
  }

  export type ClientsAggregateArgs = {
    /**
     * Filter which clients to aggregate.
     */
    where?: clientsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of clients to fetch.
     */
    orderBy?: Enumerable<clientsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: clientsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` clients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` clients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned clients
    **/
    _count?: true | ClientsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ClientsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ClientsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ClientsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ClientsMaxAggregateInputType
  }

  export type GetClientsAggregateType<T extends ClientsAggregateArgs> = {
        [P in keyof T & keyof AggregateClients]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateClients[P]>
      : GetScalarType<T[P], AggregateClients[P]>
  }




  export type ClientsGroupByArgs = {
    where?: clientsWhereInput
    orderBy?: Enumerable<clientsOrderByWithAggregationInput>
    by: ClientsScalarFieldEnum[]
    having?: clientsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ClientsCountAggregateInputType | true
    _avg?: ClientsAvgAggregateInputType
    _sum?: ClientsSumAggregateInputType
    _min?: ClientsMinAggregateInputType
    _max?: ClientsMaxAggregateInputType
  }


  export type ClientsGroupByOutputType = {
    id: number
    name: string
    address: string
    phone: string
    _count: ClientsCountAggregateOutputType | null
    _avg: ClientsAvgAggregateOutputType | null
    _sum: ClientsSumAggregateOutputType | null
    _min: ClientsMinAggregateOutputType | null
    _max: ClientsMaxAggregateOutputType | null
  }

  type GetClientsGroupByPayload<T extends ClientsGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ClientsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ClientsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ClientsGroupByOutputType[P]>
            : GetScalarType<T[P], ClientsGroupByOutputType[P]>
        }
      >
    >


  export type clientsSelect = {
    id?: boolean
    name?: boolean
    address?: boolean
    phone?: boolean
    orders?: boolean | clients$ordersArgs
    _count?: boolean | ClientsCountOutputTypeArgs
  }


  export type clientsInclude = {
    orders?: boolean | clients$ordersArgs
    _count?: boolean | ClientsCountOutputTypeArgs
  }

  export type clientsGetPayload<S extends boolean | null | undefined | clientsArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? clients :
    S extends undefined ? never :
    S extends { include: any } & (clientsArgs | clientsFindManyArgs)
    ? clients  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'orders' ? Array < ordersGetPayload<S['include'][P]>>  :
        P extends '_count' ? ClientsCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (clientsArgs | clientsFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'orders' ? Array < ordersGetPayload<S['select'][P]>>  :
        P extends '_count' ? ClientsCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof clients ? clients[P] : never
  } 
      : clients


  type clientsCountArgs = 
    Omit<clientsFindManyArgs, 'select' | 'include'> & {
      select?: ClientsCountAggregateInputType | true
    }

  export interface clientsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Clients that matches the filter.
     * @param {clientsFindUniqueArgs} args - Arguments to find a Clients
     * @example
     * // Get one Clients
     * const clients = await prisma.clients.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends clientsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, clientsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'clients'> extends True ? Prisma__clientsClient<clientsGetPayload<T>> : Prisma__clientsClient<clientsGetPayload<T> | null, null>

    /**
     * Find one Clients that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {clientsFindUniqueOrThrowArgs} args - Arguments to find a Clients
     * @example
     * // Get one Clients
     * const clients = await prisma.clients.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends clientsFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, clientsFindUniqueOrThrowArgs>
    ): Prisma__clientsClient<clientsGetPayload<T>>

    /**
     * Find the first Clients that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {clientsFindFirstArgs} args - Arguments to find a Clients
     * @example
     * // Get one Clients
     * const clients = await prisma.clients.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends clientsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, clientsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'clients'> extends True ? Prisma__clientsClient<clientsGetPayload<T>> : Prisma__clientsClient<clientsGetPayload<T> | null, null>

    /**
     * Find the first Clients that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {clientsFindFirstOrThrowArgs} args - Arguments to find a Clients
     * @example
     * // Get one Clients
     * const clients = await prisma.clients.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends clientsFindFirstOrThrowArgs>(
      args?: SelectSubset<T, clientsFindFirstOrThrowArgs>
    ): Prisma__clientsClient<clientsGetPayload<T>>

    /**
     * Find zero or more Clients that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {clientsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Clients
     * const clients = await prisma.clients.findMany()
     * 
     * // Get first 10 Clients
     * const clients = await prisma.clients.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const clientsWithIdOnly = await prisma.clients.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends clientsFindManyArgs>(
      args?: SelectSubset<T, clientsFindManyArgs>
    ): PrismaPromise<Array<clientsGetPayload<T>>>

    /**
     * Create a Clients.
     * @param {clientsCreateArgs} args - Arguments to create a Clients.
     * @example
     * // Create one Clients
     * const Clients = await prisma.clients.create({
     *   data: {
     *     // ... data to create a Clients
     *   }
     * })
     * 
    **/
    create<T extends clientsCreateArgs>(
      args: SelectSubset<T, clientsCreateArgs>
    ): Prisma__clientsClient<clientsGetPayload<T>>

    /**
     * Create many Clients.
     *     @param {clientsCreateManyArgs} args - Arguments to create many Clients.
     *     @example
     *     // Create many Clients
     *     const clients = await prisma.clients.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends clientsCreateManyArgs>(
      args?: SelectSubset<T, clientsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Clients.
     * @param {clientsDeleteArgs} args - Arguments to delete one Clients.
     * @example
     * // Delete one Clients
     * const Clients = await prisma.clients.delete({
     *   where: {
     *     // ... filter to delete one Clients
     *   }
     * })
     * 
    **/
    delete<T extends clientsDeleteArgs>(
      args: SelectSubset<T, clientsDeleteArgs>
    ): Prisma__clientsClient<clientsGetPayload<T>>

    /**
     * Update one Clients.
     * @param {clientsUpdateArgs} args - Arguments to update one Clients.
     * @example
     * // Update one Clients
     * const clients = await prisma.clients.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends clientsUpdateArgs>(
      args: SelectSubset<T, clientsUpdateArgs>
    ): Prisma__clientsClient<clientsGetPayload<T>>

    /**
     * Delete zero or more Clients.
     * @param {clientsDeleteManyArgs} args - Arguments to filter Clients to delete.
     * @example
     * // Delete a few Clients
     * const { count } = await prisma.clients.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends clientsDeleteManyArgs>(
      args?: SelectSubset<T, clientsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Clients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {clientsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Clients
     * const clients = await prisma.clients.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends clientsUpdateManyArgs>(
      args: SelectSubset<T, clientsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Clients.
     * @param {clientsUpsertArgs} args - Arguments to update or create a Clients.
     * @example
     * // Update or create a Clients
     * const clients = await prisma.clients.upsert({
     *   create: {
     *     // ... data to create a Clients
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Clients we want to update
     *   }
     * })
    **/
    upsert<T extends clientsUpsertArgs>(
      args: SelectSubset<T, clientsUpsertArgs>
    ): Prisma__clientsClient<clientsGetPayload<T>>

    /**
     * Count the number of Clients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {clientsCountArgs} args - Arguments to filter Clients to count.
     * @example
     * // Count the number of Clients
     * const count = await prisma.clients.count({
     *   where: {
     *     // ... the filter for the Clients we want to count
     *   }
     * })
    **/
    count<T extends clientsCountArgs>(
      args?: Subset<T, clientsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ClientsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Clients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ClientsAggregateArgs>(args: Subset<T, ClientsAggregateArgs>): PrismaPromise<GetClientsAggregateType<T>>

    /**
     * Group by Clients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ClientsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ClientsGroupByArgs['orderBy'] }
        : { orderBy?: ClientsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ClientsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClientsGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for clients.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__clientsClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    orders<T extends clients$ordersArgs= {}>(args?: Subset<T, clients$ordersArgs>): PrismaPromise<Array<ordersGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * clients base type for findUnique actions
   */
  export type clientsFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the clients
     */
    select?: clientsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: clientsInclude | null
    /**
     * Filter, which clients to fetch.
     */
    where: clientsWhereUniqueInput
  }

  /**
   * clients findUnique
   */
  export interface clientsFindUniqueArgs extends clientsFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * clients findUniqueOrThrow
   */
  export type clientsFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the clients
     */
    select?: clientsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: clientsInclude | null
    /**
     * Filter, which clients to fetch.
     */
    where: clientsWhereUniqueInput
  }


  /**
   * clients base type for findFirst actions
   */
  export type clientsFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the clients
     */
    select?: clientsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: clientsInclude | null
    /**
     * Filter, which clients to fetch.
     */
    where?: clientsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of clients to fetch.
     */
    orderBy?: Enumerable<clientsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for clients.
     */
    cursor?: clientsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` clients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` clients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of clients.
     */
    distinct?: Enumerable<ClientsScalarFieldEnum>
  }

  /**
   * clients findFirst
   */
  export interface clientsFindFirstArgs extends clientsFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * clients findFirstOrThrow
   */
  export type clientsFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the clients
     */
    select?: clientsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: clientsInclude | null
    /**
     * Filter, which clients to fetch.
     */
    where?: clientsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of clients to fetch.
     */
    orderBy?: Enumerable<clientsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for clients.
     */
    cursor?: clientsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` clients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` clients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of clients.
     */
    distinct?: Enumerable<ClientsScalarFieldEnum>
  }


  /**
   * clients findMany
   */
  export type clientsFindManyArgs = {
    /**
     * Select specific fields to fetch from the clients
     */
    select?: clientsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: clientsInclude | null
    /**
     * Filter, which clients to fetch.
     */
    where?: clientsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of clients to fetch.
     */
    orderBy?: Enumerable<clientsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing clients.
     */
    cursor?: clientsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` clients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` clients.
     */
    skip?: number
    distinct?: Enumerable<ClientsScalarFieldEnum>
  }


  /**
   * clients create
   */
  export type clientsCreateArgs = {
    /**
     * Select specific fields to fetch from the clients
     */
    select?: clientsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: clientsInclude | null
    /**
     * The data needed to create a clients.
     */
    data: XOR<clientsCreateInput, clientsUncheckedCreateInput>
  }


  /**
   * clients createMany
   */
  export type clientsCreateManyArgs = {
    /**
     * The data used to create many clients.
     */
    data: Enumerable<clientsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * clients update
   */
  export type clientsUpdateArgs = {
    /**
     * Select specific fields to fetch from the clients
     */
    select?: clientsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: clientsInclude | null
    /**
     * The data needed to update a clients.
     */
    data: XOR<clientsUpdateInput, clientsUncheckedUpdateInput>
    /**
     * Choose, which clients to update.
     */
    where: clientsWhereUniqueInput
  }


  /**
   * clients updateMany
   */
  export type clientsUpdateManyArgs = {
    /**
     * The data used to update clients.
     */
    data: XOR<clientsUpdateManyMutationInput, clientsUncheckedUpdateManyInput>
    /**
     * Filter which clients to update
     */
    where?: clientsWhereInput
  }


  /**
   * clients upsert
   */
  export type clientsUpsertArgs = {
    /**
     * Select specific fields to fetch from the clients
     */
    select?: clientsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: clientsInclude | null
    /**
     * The filter to search for the clients to update in case it exists.
     */
    where: clientsWhereUniqueInput
    /**
     * In case the clients found by the `where` argument doesn't exist, create a new clients with this data.
     */
    create: XOR<clientsCreateInput, clientsUncheckedCreateInput>
    /**
     * In case the clients was found with the provided `where` argument, update it with this data.
     */
    update: XOR<clientsUpdateInput, clientsUncheckedUpdateInput>
  }


  /**
   * clients delete
   */
  export type clientsDeleteArgs = {
    /**
     * Select specific fields to fetch from the clients
     */
    select?: clientsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: clientsInclude | null
    /**
     * Filter which clients to delete.
     */
    where: clientsWhereUniqueInput
  }


  /**
   * clients deleteMany
   */
  export type clientsDeleteManyArgs = {
    /**
     * Filter which clients to delete
     */
    where?: clientsWhereInput
  }


  /**
   * clients.orders
   */
  export type clients$ordersArgs = {
    /**
     * Select specific fields to fetch from the orders
     */
    select?: ordersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ordersInclude | null
    where?: ordersWhereInput
    orderBy?: Enumerable<ordersOrderByWithRelationInput>
    cursor?: ordersWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<OrdersScalarFieldEnum>
  }


  /**
   * clients without action
   */
  export type clientsArgs = {
    /**
     * Select specific fields to fetch from the clients
     */
    select?: clientsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: clientsInclude | null
  }



  /**
   * Model newClients
   */


  export type AggregateNewClients = {
    _count: NewClientsCountAggregateOutputType | null
    _avg: NewClientsAvgAggregateOutputType | null
    _sum: NewClientsSumAggregateOutputType | null
    _min: NewClientsMinAggregateOutputType | null
    _max: NewClientsMaxAggregateOutputType | null
  }

  export type NewClientsAvgAggregateOutputType = {
    id: number | null
  }

  export type NewClientsSumAggregateOutputType = {
    id: number | null
  }

  export type NewClientsMinAggregateOutputType = {
    id: number | null
    name: string | null
    address: string | null
  }

  export type NewClientsMaxAggregateOutputType = {
    id: number | null
    name: string | null
    address: string | null
  }

  export type NewClientsCountAggregateOutputType = {
    id: number
    name: number
    address: number
    _all: number
  }


  export type NewClientsAvgAggregateInputType = {
    id?: true
  }

  export type NewClientsSumAggregateInputType = {
    id?: true
  }

  export type NewClientsMinAggregateInputType = {
    id?: true
    name?: true
    address?: true
  }

  export type NewClientsMaxAggregateInputType = {
    id?: true
    name?: true
    address?: true
  }

  export type NewClientsCountAggregateInputType = {
    id?: true
    name?: true
    address?: true
    _all?: true
  }

  export type NewClientsAggregateArgs = {
    /**
     * Filter which newClients to aggregate.
     */
    where?: newClientsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of newClients to fetch.
     */
    orderBy?: Enumerable<newClientsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: newClientsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` newClients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` newClients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned newClients
    **/
    _count?: true | NewClientsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: NewClientsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: NewClientsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NewClientsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NewClientsMaxAggregateInputType
  }

  export type GetNewClientsAggregateType<T extends NewClientsAggregateArgs> = {
        [P in keyof T & keyof AggregateNewClients]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNewClients[P]>
      : GetScalarType<T[P], AggregateNewClients[P]>
  }




  export type NewClientsGroupByArgs = {
    where?: newClientsWhereInput
    orderBy?: Enumerable<newClientsOrderByWithAggregationInput>
    by: NewClientsScalarFieldEnum[]
    having?: newClientsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NewClientsCountAggregateInputType | true
    _avg?: NewClientsAvgAggregateInputType
    _sum?: NewClientsSumAggregateInputType
    _min?: NewClientsMinAggregateInputType
    _max?: NewClientsMaxAggregateInputType
  }


  export type NewClientsGroupByOutputType = {
    id: number
    name: string
    address: string
    _count: NewClientsCountAggregateOutputType | null
    _avg: NewClientsAvgAggregateOutputType | null
    _sum: NewClientsSumAggregateOutputType | null
    _min: NewClientsMinAggregateOutputType | null
    _max: NewClientsMaxAggregateOutputType | null
  }

  type GetNewClientsGroupByPayload<T extends NewClientsGroupByArgs> = PrismaPromise<
    Array<
      PickArray<NewClientsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NewClientsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NewClientsGroupByOutputType[P]>
            : GetScalarType<T[P], NewClientsGroupByOutputType[P]>
        }
      >
    >


  export type newClientsSelect = {
    id?: boolean
    name?: boolean
    address?: boolean
    newOrders?: boolean | newClients$newOrdersArgs
    _count?: boolean | NewClientsCountOutputTypeArgs
  }


  export type newClientsInclude = {
    newOrders?: boolean | newClients$newOrdersArgs
    _count?: boolean | NewClientsCountOutputTypeArgs
  }

  export type newClientsGetPayload<S extends boolean | null | undefined | newClientsArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? newClients :
    S extends undefined ? never :
    S extends { include: any } & (newClientsArgs | newClientsFindManyArgs)
    ? newClients  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'newOrders' ? Array < newOrdersGetPayload<S['include'][P]>>  :
        P extends '_count' ? NewClientsCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (newClientsArgs | newClientsFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'newOrders' ? Array < newOrdersGetPayload<S['select'][P]>>  :
        P extends '_count' ? NewClientsCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof newClients ? newClients[P] : never
  } 
      : newClients


  type newClientsCountArgs = 
    Omit<newClientsFindManyArgs, 'select' | 'include'> & {
      select?: NewClientsCountAggregateInputType | true
    }

  export interface newClientsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one NewClients that matches the filter.
     * @param {newClientsFindUniqueArgs} args - Arguments to find a NewClients
     * @example
     * // Get one NewClients
     * const newClients = await prisma.newClients.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends newClientsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, newClientsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'newClients'> extends True ? Prisma__newClientsClient<newClientsGetPayload<T>> : Prisma__newClientsClient<newClientsGetPayload<T> | null, null>

    /**
     * Find one NewClients that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {newClientsFindUniqueOrThrowArgs} args - Arguments to find a NewClients
     * @example
     * // Get one NewClients
     * const newClients = await prisma.newClients.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends newClientsFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, newClientsFindUniqueOrThrowArgs>
    ): Prisma__newClientsClient<newClientsGetPayload<T>>

    /**
     * Find the first NewClients that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {newClientsFindFirstArgs} args - Arguments to find a NewClients
     * @example
     * // Get one NewClients
     * const newClients = await prisma.newClients.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends newClientsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, newClientsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'newClients'> extends True ? Prisma__newClientsClient<newClientsGetPayload<T>> : Prisma__newClientsClient<newClientsGetPayload<T> | null, null>

    /**
     * Find the first NewClients that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {newClientsFindFirstOrThrowArgs} args - Arguments to find a NewClients
     * @example
     * // Get one NewClients
     * const newClients = await prisma.newClients.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends newClientsFindFirstOrThrowArgs>(
      args?: SelectSubset<T, newClientsFindFirstOrThrowArgs>
    ): Prisma__newClientsClient<newClientsGetPayload<T>>

    /**
     * Find zero or more NewClients that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {newClientsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all NewClients
     * const newClients = await prisma.newClients.findMany()
     * 
     * // Get first 10 NewClients
     * const newClients = await prisma.newClients.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const newClientsWithIdOnly = await prisma.newClients.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends newClientsFindManyArgs>(
      args?: SelectSubset<T, newClientsFindManyArgs>
    ): PrismaPromise<Array<newClientsGetPayload<T>>>

    /**
     * Create a NewClients.
     * @param {newClientsCreateArgs} args - Arguments to create a NewClients.
     * @example
     * // Create one NewClients
     * const NewClients = await prisma.newClients.create({
     *   data: {
     *     // ... data to create a NewClients
     *   }
     * })
     * 
    **/
    create<T extends newClientsCreateArgs>(
      args: SelectSubset<T, newClientsCreateArgs>
    ): Prisma__newClientsClient<newClientsGetPayload<T>>

    /**
     * Create many NewClients.
     *     @param {newClientsCreateManyArgs} args - Arguments to create many NewClients.
     *     @example
     *     // Create many NewClients
     *     const newClients = await prisma.newClients.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends newClientsCreateManyArgs>(
      args?: SelectSubset<T, newClientsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a NewClients.
     * @param {newClientsDeleteArgs} args - Arguments to delete one NewClients.
     * @example
     * // Delete one NewClients
     * const NewClients = await prisma.newClients.delete({
     *   where: {
     *     // ... filter to delete one NewClients
     *   }
     * })
     * 
    **/
    delete<T extends newClientsDeleteArgs>(
      args: SelectSubset<T, newClientsDeleteArgs>
    ): Prisma__newClientsClient<newClientsGetPayload<T>>

    /**
     * Update one NewClients.
     * @param {newClientsUpdateArgs} args - Arguments to update one NewClients.
     * @example
     * // Update one NewClients
     * const newClients = await prisma.newClients.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends newClientsUpdateArgs>(
      args: SelectSubset<T, newClientsUpdateArgs>
    ): Prisma__newClientsClient<newClientsGetPayload<T>>

    /**
     * Delete zero or more NewClients.
     * @param {newClientsDeleteManyArgs} args - Arguments to filter NewClients to delete.
     * @example
     * // Delete a few NewClients
     * const { count } = await prisma.newClients.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends newClientsDeleteManyArgs>(
      args?: SelectSubset<T, newClientsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more NewClients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {newClientsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many NewClients
     * const newClients = await prisma.newClients.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends newClientsUpdateManyArgs>(
      args: SelectSubset<T, newClientsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one NewClients.
     * @param {newClientsUpsertArgs} args - Arguments to update or create a NewClients.
     * @example
     * // Update or create a NewClients
     * const newClients = await prisma.newClients.upsert({
     *   create: {
     *     // ... data to create a NewClients
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the NewClients we want to update
     *   }
     * })
    **/
    upsert<T extends newClientsUpsertArgs>(
      args: SelectSubset<T, newClientsUpsertArgs>
    ): Prisma__newClientsClient<newClientsGetPayload<T>>

    /**
     * Count the number of NewClients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {newClientsCountArgs} args - Arguments to filter NewClients to count.
     * @example
     * // Count the number of NewClients
     * const count = await prisma.newClients.count({
     *   where: {
     *     // ... the filter for the NewClients we want to count
     *   }
     * })
    **/
    count<T extends newClientsCountArgs>(
      args?: Subset<T, newClientsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NewClientsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a NewClients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NewClientsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NewClientsAggregateArgs>(args: Subset<T, NewClientsAggregateArgs>): PrismaPromise<GetNewClientsAggregateType<T>>

    /**
     * Group by NewClients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NewClientsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NewClientsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NewClientsGroupByArgs['orderBy'] }
        : { orderBy?: NewClientsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NewClientsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNewClientsGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for newClients.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__newClientsClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    newOrders<T extends newClients$newOrdersArgs= {}>(args?: Subset<T, newClients$newOrdersArgs>): PrismaPromise<Array<newOrdersGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * newClients base type for findUnique actions
   */
  export type newClientsFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the newClients
     */
    select?: newClientsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: newClientsInclude | null
    /**
     * Filter, which newClients to fetch.
     */
    where: newClientsWhereUniqueInput
  }

  /**
   * newClients findUnique
   */
  export interface newClientsFindUniqueArgs extends newClientsFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * newClients findUniqueOrThrow
   */
  export type newClientsFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the newClients
     */
    select?: newClientsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: newClientsInclude | null
    /**
     * Filter, which newClients to fetch.
     */
    where: newClientsWhereUniqueInput
  }


  /**
   * newClients base type for findFirst actions
   */
  export type newClientsFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the newClients
     */
    select?: newClientsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: newClientsInclude | null
    /**
     * Filter, which newClients to fetch.
     */
    where?: newClientsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of newClients to fetch.
     */
    orderBy?: Enumerable<newClientsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for newClients.
     */
    cursor?: newClientsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` newClients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` newClients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of newClients.
     */
    distinct?: Enumerable<NewClientsScalarFieldEnum>
  }

  /**
   * newClients findFirst
   */
  export interface newClientsFindFirstArgs extends newClientsFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * newClients findFirstOrThrow
   */
  export type newClientsFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the newClients
     */
    select?: newClientsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: newClientsInclude | null
    /**
     * Filter, which newClients to fetch.
     */
    where?: newClientsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of newClients to fetch.
     */
    orderBy?: Enumerable<newClientsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for newClients.
     */
    cursor?: newClientsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` newClients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` newClients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of newClients.
     */
    distinct?: Enumerable<NewClientsScalarFieldEnum>
  }


  /**
   * newClients findMany
   */
  export type newClientsFindManyArgs = {
    /**
     * Select specific fields to fetch from the newClients
     */
    select?: newClientsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: newClientsInclude | null
    /**
     * Filter, which newClients to fetch.
     */
    where?: newClientsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of newClients to fetch.
     */
    orderBy?: Enumerable<newClientsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing newClients.
     */
    cursor?: newClientsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` newClients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` newClients.
     */
    skip?: number
    distinct?: Enumerable<NewClientsScalarFieldEnum>
  }


  /**
   * newClients create
   */
  export type newClientsCreateArgs = {
    /**
     * Select specific fields to fetch from the newClients
     */
    select?: newClientsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: newClientsInclude | null
    /**
     * The data needed to create a newClients.
     */
    data: XOR<newClientsCreateInput, newClientsUncheckedCreateInput>
  }


  /**
   * newClients createMany
   */
  export type newClientsCreateManyArgs = {
    /**
     * The data used to create many newClients.
     */
    data: Enumerable<newClientsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * newClients update
   */
  export type newClientsUpdateArgs = {
    /**
     * Select specific fields to fetch from the newClients
     */
    select?: newClientsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: newClientsInclude | null
    /**
     * The data needed to update a newClients.
     */
    data: XOR<newClientsUpdateInput, newClientsUncheckedUpdateInput>
    /**
     * Choose, which newClients to update.
     */
    where: newClientsWhereUniqueInput
  }


  /**
   * newClients updateMany
   */
  export type newClientsUpdateManyArgs = {
    /**
     * The data used to update newClients.
     */
    data: XOR<newClientsUpdateManyMutationInput, newClientsUncheckedUpdateManyInput>
    /**
     * Filter which newClients to update
     */
    where?: newClientsWhereInput
  }


  /**
   * newClients upsert
   */
  export type newClientsUpsertArgs = {
    /**
     * Select specific fields to fetch from the newClients
     */
    select?: newClientsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: newClientsInclude | null
    /**
     * The filter to search for the newClients to update in case it exists.
     */
    where: newClientsWhereUniqueInput
    /**
     * In case the newClients found by the `where` argument doesn't exist, create a new newClients with this data.
     */
    create: XOR<newClientsCreateInput, newClientsUncheckedCreateInput>
    /**
     * In case the newClients was found with the provided `where` argument, update it with this data.
     */
    update: XOR<newClientsUpdateInput, newClientsUncheckedUpdateInput>
  }


  /**
   * newClients delete
   */
  export type newClientsDeleteArgs = {
    /**
     * Select specific fields to fetch from the newClients
     */
    select?: newClientsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: newClientsInclude | null
    /**
     * Filter which newClients to delete.
     */
    where: newClientsWhereUniqueInput
  }


  /**
   * newClients deleteMany
   */
  export type newClientsDeleteManyArgs = {
    /**
     * Filter which newClients to delete
     */
    where?: newClientsWhereInput
  }


  /**
   * newClients.newOrders
   */
  export type newClients$newOrdersArgs = {
    /**
     * Select specific fields to fetch from the newOrders
     */
    select?: newOrdersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: newOrdersInclude | null
    where?: newOrdersWhereInput
    orderBy?: Enumerable<newOrdersOrderByWithRelationInput>
    cursor?: newOrdersWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<NewOrdersScalarFieldEnum>
  }


  /**
   * newClients without action
   */
  export type newClientsArgs = {
    /**
     * Select specific fields to fetch from the newClients
     */
    select?: newClientsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: newClientsInclude | null
  }



  /**
   * Model newOrders
   */


  export type AggregateNewOrders = {
    _count: NewOrdersCountAggregateOutputType | null
    _avg: NewOrdersAvgAggregateOutputType | null
    _sum: NewOrdersSumAggregateOutputType | null
    _min: NewOrdersMinAggregateOutputType | null
    _max: NewOrdersMaxAggregateOutputType | null
  }

  export type NewOrdersAvgAggregateOutputType = {
    id: number | null
    clientId: number | null
    productsId: number | null
    quantity: number | null
    totalPrice: Decimal | null
  }

  export type NewOrdersSumAggregateOutputType = {
    id: number | null
    clientId: number | null
    productsId: number | null
    quantity: number | null
    totalPrice: Decimal | null
  }

  export type NewOrdersMinAggregateOutputType = {
    id: number | null
    clientId: number | null
    productsId: number | null
    quantity: number | null
    createdAt: Date | null
    totalPrice: Decimal | null
  }

  export type NewOrdersMaxAggregateOutputType = {
    id: number | null
    clientId: number | null
    productsId: number | null
    quantity: number | null
    createdAt: Date | null
    totalPrice: Decimal | null
  }

  export type NewOrdersCountAggregateOutputType = {
    id: number
    clientId: number
    productsId: number
    quantity: number
    createdAt: number
    totalPrice: number
    _all: number
  }


  export type NewOrdersAvgAggregateInputType = {
    id?: true
    clientId?: true
    productsId?: true
    quantity?: true
    totalPrice?: true
  }

  export type NewOrdersSumAggregateInputType = {
    id?: true
    clientId?: true
    productsId?: true
    quantity?: true
    totalPrice?: true
  }

  export type NewOrdersMinAggregateInputType = {
    id?: true
    clientId?: true
    productsId?: true
    quantity?: true
    createdAt?: true
    totalPrice?: true
  }

  export type NewOrdersMaxAggregateInputType = {
    id?: true
    clientId?: true
    productsId?: true
    quantity?: true
    createdAt?: true
    totalPrice?: true
  }

  export type NewOrdersCountAggregateInputType = {
    id?: true
    clientId?: true
    productsId?: true
    quantity?: true
    createdAt?: true
    totalPrice?: true
    _all?: true
  }

  export type NewOrdersAggregateArgs = {
    /**
     * Filter which newOrders to aggregate.
     */
    where?: newOrdersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of newOrders to fetch.
     */
    orderBy?: Enumerable<newOrdersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: newOrdersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` newOrders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` newOrders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned newOrders
    **/
    _count?: true | NewOrdersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: NewOrdersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: NewOrdersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NewOrdersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NewOrdersMaxAggregateInputType
  }

  export type GetNewOrdersAggregateType<T extends NewOrdersAggregateArgs> = {
        [P in keyof T & keyof AggregateNewOrders]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNewOrders[P]>
      : GetScalarType<T[P], AggregateNewOrders[P]>
  }




  export type NewOrdersGroupByArgs = {
    where?: newOrdersWhereInput
    orderBy?: Enumerable<newOrdersOrderByWithAggregationInput>
    by: NewOrdersScalarFieldEnum[]
    having?: newOrdersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NewOrdersCountAggregateInputType | true
    _avg?: NewOrdersAvgAggregateInputType
    _sum?: NewOrdersSumAggregateInputType
    _min?: NewOrdersMinAggregateInputType
    _max?: NewOrdersMaxAggregateInputType
  }


  export type NewOrdersGroupByOutputType = {
    id: number
    clientId: number
    productsId: number
    quantity: number
    createdAt: Date
    totalPrice: Decimal
    _count: NewOrdersCountAggregateOutputType | null
    _avg: NewOrdersAvgAggregateOutputType | null
    _sum: NewOrdersSumAggregateOutputType | null
    _min: NewOrdersMinAggregateOutputType | null
    _max: NewOrdersMaxAggregateOutputType | null
  }

  type GetNewOrdersGroupByPayload<T extends NewOrdersGroupByArgs> = PrismaPromise<
    Array<
      PickArray<NewOrdersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NewOrdersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NewOrdersGroupByOutputType[P]>
            : GetScalarType<T[P], NewOrdersGroupByOutputType[P]>
        }
      >
    >


  export type newOrdersSelect = {
    id?: boolean
    clientId?: boolean
    productsId?: boolean
    quantity?: boolean
    createdAt?: boolean
    totalPrice?: boolean
    newClients?: boolean | newClientsArgs
    products?: boolean | productsArgs
  }


  export type newOrdersInclude = {
    newClients?: boolean | newClientsArgs
    products?: boolean | productsArgs
  }

  export type newOrdersGetPayload<S extends boolean | null | undefined | newOrdersArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? newOrders :
    S extends undefined ? never :
    S extends { include: any } & (newOrdersArgs | newOrdersFindManyArgs)
    ? newOrders  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'newClients' ? newClientsGetPayload<S['include'][P]> :
        P extends 'products' ? productsGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (newOrdersArgs | newOrdersFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'newClients' ? newClientsGetPayload<S['select'][P]> :
        P extends 'products' ? productsGetPayload<S['select'][P]> :  P extends keyof newOrders ? newOrders[P] : never
  } 
      : newOrders


  type newOrdersCountArgs = 
    Omit<newOrdersFindManyArgs, 'select' | 'include'> & {
      select?: NewOrdersCountAggregateInputType | true
    }

  export interface newOrdersDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one NewOrders that matches the filter.
     * @param {newOrdersFindUniqueArgs} args - Arguments to find a NewOrders
     * @example
     * // Get one NewOrders
     * const newOrders = await prisma.newOrders.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends newOrdersFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, newOrdersFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'newOrders'> extends True ? Prisma__newOrdersClient<newOrdersGetPayload<T>> : Prisma__newOrdersClient<newOrdersGetPayload<T> | null, null>

    /**
     * Find one NewOrders that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {newOrdersFindUniqueOrThrowArgs} args - Arguments to find a NewOrders
     * @example
     * // Get one NewOrders
     * const newOrders = await prisma.newOrders.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends newOrdersFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, newOrdersFindUniqueOrThrowArgs>
    ): Prisma__newOrdersClient<newOrdersGetPayload<T>>

    /**
     * Find the first NewOrders that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {newOrdersFindFirstArgs} args - Arguments to find a NewOrders
     * @example
     * // Get one NewOrders
     * const newOrders = await prisma.newOrders.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends newOrdersFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, newOrdersFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'newOrders'> extends True ? Prisma__newOrdersClient<newOrdersGetPayload<T>> : Prisma__newOrdersClient<newOrdersGetPayload<T> | null, null>

    /**
     * Find the first NewOrders that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {newOrdersFindFirstOrThrowArgs} args - Arguments to find a NewOrders
     * @example
     * // Get one NewOrders
     * const newOrders = await prisma.newOrders.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends newOrdersFindFirstOrThrowArgs>(
      args?: SelectSubset<T, newOrdersFindFirstOrThrowArgs>
    ): Prisma__newOrdersClient<newOrdersGetPayload<T>>

    /**
     * Find zero or more NewOrders that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {newOrdersFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all NewOrders
     * const newOrders = await prisma.newOrders.findMany()
     * 
     * // Get first 10 NewOrders
     * const newOrders = await prisma.newOrders.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const newOrdersWithIdOnly = await prisma.newOrders.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends newOrdersFindManyArgs>(
      args?: SelectSubset<T, newOrdersFindManyArgs>
    ): PrismaPromise<Array<newOrdersGetPayload<T>>>

    /**
     * Create a NewOrders.
     * @param {newOrdersCreateArgs} args - Arguments to create a NewOrders.
     * @example
     * // Create one NewOrders
     * const NewOrders = await prisma.newOrders.create({
     *   data: {
     *     // ... data to create a NewOrders
     *   }
     * })
     * 
    **/
    create<T extends newOrdersCreateArgs>(
      args: SelectSubset<T, newOrdersCreateArgs>
    ): Prisma__newOrdersClient<newOrdersGetPayload<T>>

    /**
     * Create many NewOrders.
     *     @param {newOrdersCreateManyArgs} args - Arguments to create many NewOrders.
     *     @example
     *     // Create many NewOrders
     *     const newOrders = await prisma.newOrders.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends newOrdersCreateManyArgs>(
      args?: SelectSubset<T, newOrdersCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a NewOrders.
     * @param {newOrdersDeleteArgs} args - Arguments to delete one NewOrders.
     * @example
     * // Delete one NewOrders
     * const NewOrders = await prisma.newOrders.delete({
     *   where: {
     *     // ... filter to delete one NewOrders
     *   }
     * })
     * 
    **/
    delete<T extends newOrdersDeleteArgs>(
      args: SelectSubset<T, newOrdersDeleteArgs>
    ): Prisma__newOrdersClient<newOrdersGetPayload<T>>

    /**
     * Update one NewOrders.
     * @param {newOrdersUpdateArgs} args - Arguments to update one NewOrders.
     * @example
     * // Update one NewOrders
     * const newOrders = await prisma.newOrders.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends newOrdersUpdateArgs>(
      args: SelectSubset<T, newOrdersUpdateArgs>
    ): Prisma__newOrdersClient<newOrdersGetPayload<T>>

    /**
     * Delete zero or more NewOrders.
     * @param {newOrdersDeleteManyArgs} args - Arguments to filter NewOrders to delete.
     * @example
     * // Delete a few NewOrders
     * const { count } = await prisma.newOrders.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends newOrdersDeleteManyArgs>(
      args?: SelectSubset<T, newOrdersDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more NewOrders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {newOrdersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many NewOrders
     * const newOrders = await prisma.newOrders.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends newOrdersUpdateManyArgs>(
      args: SelectSubset<T, newOrdersUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one NewOrders.
     * @param {newOrdersUpsertArgs} args - Arguments to update or create a NewOrders.
     * @example
     * // Update or create a NewOrders
     * const newOrders = await prisma.newOrders.upsert({
     *   create: {
     *     // ... data to create a NewOrders
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the NewOrders we want to update
     *   }
     * })
    **/
    upsert<T extends newOrdersUpsertArgs>(
      args: SelectSubset<T, newOrdersUpsertArgs>
    ): Prisma__newOrdersClient<newOrdersGetPayload<T>>

    /**
     * Count the number of NewOrders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {newOrdersCountArgs} args - Arguments to filter NewOrders to count.
     * @example
     * // Count the number of NewOrders
     * const count = await prisma.newOrders.count({
     *   where: {
     *     // ... the filter for the NewOrders we want to count
     *   }
     * })
    **/
    count<T extends newOrdersCountArgs>(
      args?: Subset<T, newOrdersCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NewOrdersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a NewOrders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NewOrdersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NewOrdersAggregateArgs>(args: Subset<T, NewOrdersAggregateArgs>): PrismaPromise<GetNewOrdersAggregateType<T>>

    /**
     * Group by NewOrders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NewOrdersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NewOrdersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NewOrdersGroupByArgs['orderBy'] }
        : { orderBy?: NewOrdersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NewOrdersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNewOrdersGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for newOrders.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__newOrdersClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    newClients<T extends newClientsArgs= {}>(args?: Subset<T, newClientsArgs>): Prisma__newClientsClient<newClientsGetPayload<T> | Null>;

    products<T extends productsArgs= {}>(args?: Subset<T, productsArgs>): Prisma__productsClient<productsGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * newOrders base type for findUnique actions
   */
  export type newOrdersFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the newOrders
     */
    select?: newOrdersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: newOrdersInclude | null
    /**
     * Filter, which newOrders to fetch.
     */
    where: newOrdersWhereUniqueInput
  }

  /**
   * newOrders findUnique
   */
  export interface newOrdersFindUniqueArgs extends newOrdersFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * newOrders findUniqueOrThrow
   */
  export type newOrdersFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the newOrders
     */
    select?: newOrdersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: newOrdersInclude | null
    /**
     * Filter, which newOrders to fetch.
     */
    where: newOrdersWhereUniqueInput
  }


  /**
   * newOrders base type for findFirst actions
   */
  export type newOrdersFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the newOrders
     */
    select?: newOrdersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: newOrdersInclude | null
    /**
     * Filter, which newOrders to fetch.
     */
    where?: newOrdersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of newOrders to fetch.
     */
    orderBy?: Enumerable<newOrdersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for newOrders.
     */
    cursor?: newOrdersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` newOrders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` newOrders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of newOrders.
     */
    distinct?: Enumerable<NewOrdersScalarFieldEnum>
  }

  /**
   * newOrders findFirst
   */
  export interface newOrdersFindFirstArgs extends newOrdersFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * newOrders findFirstOrThrow
   */
  export type newOrdersFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the newOrders
     */
    select?: newOrdersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: newOrdersInclude | null
    /**
     * Filter, which newOrders to fetch.
     */
    where?: newOrdersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of newOrders to fetch.
     */
    orderBy?: Enumerable<newOrdersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for newOrders.
     */
    cursor?: newOrdersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` newOrders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` newOrders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of newOrders.
     */
    distinct?: Enumerable<NewOrdersScalarFieldEnum>
  }


  /**
   * newOrders findMany
   */
  export type newOrdersFindManyArgs = {
    /**
     * Select specific fields to fetch from the newOrders
     */
    select?: newOrdersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: newOrdersInclude | null
    /**
     * Filter, which newOrders to fetch.
     */
    where?: newOrdersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of newOrders to fetch.
     */
    orderBy?: Enumerable<newOrdersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing newOrders.
     */
    cursor?: newOrdersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` newOrders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` newOrders.
     */
    skip?: number
    distinct?: Enumerable<NewOrdersScalarFieldEnum>
  }


  /**
   * newOrders create
   */
  export type newOrdersCreateArgs = {
    /**
     * Select specific fields to fetch from the newOrders
     */
    select?: newOrdersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: newOrdersInclude | null
    /**
     * The data needed to create a newOrders.
     */
    data: XOR<newOrdersCreateInput, newOrdersUncheckedCreateInput>
  }


  /**
   * newOrders createMany
   */
  export type newOrdersCreateManyArgs = {
    /**
     * The data used to create many newOrders.
     */
    data: Enumerable<newOrdersCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * newOrders update
   */
  export type newOrdersUpdateArgs = {
    /**
     * Select specific fields to fetch from the newOrders
     */
    select?: newOrdersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: newOrdersInclude | null
    /**
     * The data needed to update a newOrders.
     */
    data: XOR<newOrdersUpdateInput, newOrdersUncheckedUpdateInput>
    /**
     * Choose, which newOrders to update.
     */
    where: newOrdersWhereUniqueInput
  }


  /**
   * newOrders updateMany
   */
  export type newOrdersUpdateManyArgs = {
    /**
     * The data used to update newOrders.
     */
    data: XOR<newOrdersUpdateManyMutationInput, newOrdersUncheckedUpdateManyInput>
    /**
     * Filter which newOrders to update
     */
    where?: newOrdersWhereInput
  }


  /**
   * newOrders upsert
   */
  export type newOrdersUpsertArgs = {
    /**
     * Select specific fields to fetch from the newOrders
     */
    select?: newOrdersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: newOrdersInclude | null
    /**
     * The filter to search for the newOrders to update in case it exists.
     */
    where: newOrdersWhereUniqueInput
    /**
     * In case the newOrders found by the `where` argument doesn't exist, create a new newOrders with this data.
     */
    create: XOR<newOrdersCreateInput, newOrdersUncheckedCreateInput>
    /**
     * In case the newOrders was found with the provided `where` argument, update it with this data.
     */
    update: XOR<newOrdersUpdateInput, newOrdersUncheckedUpdateInput>
  }


  /**
   * newOrders delete
   */
  export type newOrdersDeleteArgs = {
    /**
     * Select specific fields to fetch from the newOrders
     */
    select?: newOrdersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: newOrdersInclude | null
    /**
     * Filter which newOrders to delete.
     */
    where: newOrdersWhereUniqueInput
  }


  /**
   * newOrders deleteMany
   */
  export type newOrdersDeleteManyArgs = {
    /**
     * Filter which newOrders to delete
     */
    where?: newOrdersWhereInput
  }


  /**
   * newOrders without action
   */
  export type newOrdersArgs = {
    /**
     * Select specific fields to fetch from the newOrders
     */
    select?: newOrdersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: newOrdersInclude | null
  }



  /**
   * Model orders
   */


  export type AggregateOrders = {
    _count: OrdersCountAggregateOutputType | null
    _avg: OrdersAvgAggregateOutputType | null
    _sum: OrdersSumAggregateOutputType | null
    _min: OrdersMinAggregateOutputType | null
    _max: OrdersMaxAggregateOutputType | null
  }

  export type OrdersAvgAggregateOutputType = {
    id: number | null
    clientId: number | null
    cakeId: number | null
    quantity: number | null
    totalPrice: number | null
  }

  export type OrdersSumAggregateOutputType = {
    id: number | null
    clientId: number | null
    cakeId: number | null
    quantity: number | null
    totalPrice: number | null
  }

  export type OrdersMinAggregateOutputType = {
    id: number | null
    clientId: number | null
    cakeId: number | null
    quantity: number | null
    createdAt: Date | null
    totalPrice: number | null
  }

  export type OrdersMaxAggregateOutputType = {
    id: number | null
    clientId: number | null
    cakeId: number | null
    quantity: number | null
    createdAt: Date | null
    totalPrice: number | null
  }

  export type OrdersCountAggregateOutputType = {
    id: number
    clientId: number
    cakeId: number
    quantity: number
    createdAt: number
    totalPrice: number
    _all: number
  }


  export type OrdersAvgAggregateInputType = {
    id?: true
    clientId?: true
    cakeId?: true
    quantity?: true
    totalPrice?: true
  }

  export type OrdersSumAggregateInputType = {
    id?: true
    clientId?: true
    cakeId?: true
    quantity?: true
    totalPrice?: true
  }

  export type OrdersMinAggregateInputType = {
    id?: true
    clientId?: true
    cakeId?: true
    quantity?: true
    createdAt?: true
    totalPrice?: true
  }

  export type OrdersMaxAggregateInputType = {
    id?: true
    clientId?: true
    cakeId?: true
    quantity?: true
    createdAt?: true
    totalPrice?: true
  }

  export type OrdersCountAggregateInputType = {
    id?: true
    clientId?: true
    cakeId?: true
    quantity?: true
    createdAt?: true
    totalPrice?: true
    _all?: true
  }

  export type OrdersAggregateArgs = {
    /**
     * Filter which orders to aggregate.
     */
    where?: ordersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of orders to fetch.
     */
    orderBy?: Enumerable<ordersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ordersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` orders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned orders
    **/
    _count?: true | OrdersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OrdersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OrdersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OrdersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OrdersMaxAggregateInputType
  }

  export type GetOrdersAggregateType<T extends OrdersAggregateArgs> = {
        [P in keyof T & keyof AggregateOrders]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrders[P]>
      : GetScalarType<T[P], AggregateOrders[P]>
  }




  export type OrdersGroupByArgs = {
    where?: ordersWhereInput
    orderBy?: Enumerable<ordersOrderByWithAggregationInput>
    by: OrdersScalarFieldEnum[]
    having?: ordersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OrdersCountAggregateInputType | true
    _avg?: OrdersAvgAggregateInputType
    _sum?: OrdersSumAggregateInputType
    _min?: OrdersMinAggregateInputType
    _max?: OrdersMaxAggregateInputType
  }


  export type OrdersGroupByOutputType = {
    id: number
    clientId: number
    cakeId: number
    quantity: number
    createdAt: Date
    totalPrice: number
    _count: OrdersCountAggregateOutputType | null
    _avg: OrdersAvgAggregateOutputType | null
    _sum: OrdersSumAggregateOutputType | null
    _min: OrdersMinAggregateOutputType | null
    _max: OrdersMaxAggregateOutputType | null
  }

  type GetOrdersGroupByPayload<T extends OrdersGroupByArgs> = PrismaPromise<
    Array<
      PickArray<OrdersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OrdersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OrdersGroupByOutputType[P]>
            : GetScalarType<T[P], OrdersGroupByOutputType[P]>
        }
      >
    >


  export type ordersSelect = {
    id?: boolean
    clientId?: boolean
    cakeId?: boolean
    quantity?: boolean
    createdAt?: boolean
    totalPrice?: boolean
    clients?: boolean | clientsArgs
  }


  export type ordersInclude = {
    clients?: boolean | clientsArgs
  }

  export type ordersGetPayload<S extends boolean | null | undefined | ordersArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? orders :
    S extends undefined ? never :
    S extends { include: any } & (ordersArgs | ordersFindManyArgs)
    ? orders  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'clients' ? clientsGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (ordersArgs | ordersFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'clients' ? clientsGetPayload<S['select'][P]> :  P extends keyof orders ? orders[P] : never
  } 
      : orders


  type ordersCountArgs = 
    Omit<ordersFindManyArgs, 'select' | 'include'> & {
      select?: OrdersCountAggregateInputType | true
    }

  export interface ordersDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Orders that matches the filter.
     * @param {ordersFindUniqueArgs} args - Arguments to find a Orders
     * @example
     * // Get one Orders
     * const orders = await prisma.orders.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ordersFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ordersFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'orders'> extends True ? Prisma__ordersClient<ordersGetPayload<T>> : Prisma__ordersClient<ordersGetPayload<T> | null, null>

    /**
     * Find one Orders that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ordersFindUniqueOrThrowArgs} args - Arguments to find a Orders
     * @example
     * // Get one Orders
     * const orders = await prisma.orders.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ordersFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, ordersFindUniqueOrThrowArgs>
    ): Prisma__ordersClient<ordersGetPayload<T>>

    /**
     * Find the first Orders that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ordersFindFirstArgs} args - Arguments to find a Orders
     * @example
     * // Get one Orders
     * const orders = await prisma.orders.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ordersFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ordersFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'orders'> extends True ? Prisma__ordersClient<ordersGetPayload<T>> : Prisma__ordersClient<ordersGetPayload<T> | null, null>

    /**
     * Find the first Orders that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ordersFindFirstOrThrowArgs} args - Arguments to find a Orders
     * @example
     * // Get one Orders
     * const orders = await prisma.orders.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ordersFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ordersFindFirstOrThrowArgs>
    ): Prisma__ordersClient<ordersGetPayload<T>>

    /**
     * Find zero or more Orders that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ordersFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Orders
     * const orders = await prisma.orders.findMany()
     * 
     * // Get first 10 Orders
     * const orders = await prisma.orders.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const ordersWithIdOnly = await prisma.orders.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ordersFindManyArgs>(
      args?: SelectSubset<T, ordersFindManyArgs>
    ): PrismaPromise<Array<ordersGetPayload<T>>>

    /**
     * Create a Orders.
     * @param {ordersCreateArgs} args - Arguments to create a Orders.
     * @example
     * // Create one Orders
     * const Orders = await prisma.orders.create({
     *   data: {
     *     // ... data to create a Orders
     *   }
     * })
     * 
    **/
    create<T extends ordersCreateArgs>(
      args: SelectSubset<T, ordersCreateArgs>
    ): Prisma__ordersClient<ordersGetPayload<T>>

    /**
     * Create many Orders.
     *     @param {ordersCreateManyArgs} args - Arguments to create many Orders.
     *     @example
     *     // Create many Orders
     *     const orders = await prisma.orders.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ordersCreateManyArgs>(
      args?: SelectSubset<T, ordersCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Orders.
     * @param {ordersDeleteArgs} args - Arguments to delete one Orders.
     * @example
     * // Delete one Orders
     * const Orders = await prisma.orders.delete({
     *   where: {
     *     // ... filter to delete one Orders
     *   }
     * })
     * 
    **/
    delete<T extends ordersDeleteArgs>(
      args: SelectSubset<T, ordersDeleteArgs>
    ): Prisma__ordersClient<ordersGetPayload<T>>

    /**
     * Update one Orders.
     * @param {ordersUpdateArgs} args - Arguments to update one Orders.
     * @example
     * // Update one Orders
     * const orders = await prisma.orders.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ordersUpdateArgs>(
      args: SelectSubset<T, ordersUpdateArgs>
    ): Prisma__ordersClient<ordersGetPayload<T>>

    /**
     * Delete zero or more Orders.
     * @param {ordersDeleteManyArgs} args - Arguments to filter Orders to delete.
     * @example
     * // Delete a few Orders
     * const { count } = await prisma.orders.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ordersDeleteManyArgs>(
      args?: SelectSubset<T, ordersDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Orders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ordersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Orders
     * const orders = await prisma.orders.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ordersUpdateManyArgs>(
      args: SelectSubset<T, ordersUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Orders.
     * @param {ordersUpsertArgs} args - Arguments to update or create a Orders.
     * @example
     * // Update or create a Orders
     * const orders = await prisma.orders.upsert({
     *   create: {
     *     // ... data to create a Orders
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Orders we want to update
     *   }
     * })
    **/
    upsert<T extends ordersUpsertArgs>(
      args: SelectSubset<T, ordersUpsertArgs>
    ): Prisma__ordersClient<ordersGetPayload<T>>

    /**
     * Count the number of Orders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ordersCountArgs} args - Arguments to filter Orders to count.
     * @example
     * // Count the number of Orders
     * const count = await prisma.orders.count({
     *   where: {
     *     // ... the filter for the Orders we want to count
     *   }
     * })
    **/
    count<T extends ordersCountArgs>(
      args?: Subset<T, ordersCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OrdersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Orders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrdersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OrdersAggregateArgs>(args: Subset<T, OrdersAggregateArgs>): PrismaPromise<GetOrdersAggregateType<T>>

    /**
     * Group by Orders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrdersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OrdersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OrdersGroupByArgs['orderBy'] }
        : { orderBy?: OrdersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OrdersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrdersGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for orders.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ordersClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    clients<T extends clientsArgs= {}>(args?: Subset<T, clientsArgs>): Prisma__clientsClient<clientsGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * orders base type for findUnique actions
   */
  export type ordersFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the orders
     */
    select?: ordersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ordersInclude | null
    /**
     * Filter, which orders to fetch.
     */
    where: ordersWhereUniqueInput
  }

  /**
   * orders findUnique
   */
  export interface ordersFindUniqueArgs extends ordersFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * orders findUniqueOrThrow
   */
  export type ordersFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the orders
     */
    select?: ordersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ordersInclude | null
    /**
     * Filter, which orders to fetch.
     */
    where: ordersWhereUniqueInput
  }


  /**
   * orders base type for findFirst actions
   */
  export type ordersFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the orders
     */
    select?: ordersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ordersInclude | null
    /**
     * Filter, which orders to fetch.
     */
    where?: ordersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of orders to fetch.
     */
    orderBy?: Enumerable<ordersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for orders.
     */
    cursor?: ordersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` orders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of orders.
     */
    distinct?: Enumerable<OrdersScalarFieldEnum>
  }

  /**
   * orders findFirst
   */
  export interface ordersFindFirstArgs extends ordersFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * orders findFirstOrThrow
   */
  export type ordersFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the orders
     */
    select?: ordersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ordersInclude | null
    /**
     * Filter, which orders to fetch.
     */
    where?: ordersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of orders to fetch.
     */
    orderBy?: Enumerable<ordersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for orders.
     */
    cursor?: ordersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` orders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of orders.
     */
    distinct?: Enumerable<OrdersScalarFieldEnum>
  }


  /**
   * orders findMany
   */
  export type ordersFindManyArgs = {
    /**
     * Select specific fields to fetch from the orders
     */
    select?: ordersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ordersInclude | null
    /**
     * Filter, which orders to fetch.
     */
    where?: ordersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of orders to fetch.
     */
    orderBy?: Enumerable<ordersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing orders.
     */
    cursor?: ordersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` orders.
     */
    skip?: number
    distinct?: Enumerable<OrdersScalarFieldEnum>
  }


  /**
   * orders create
   */
  export type ordersCreateArgs = {
    /**
     * Select specific fields to fetch from the orders
     */
    select?: ordersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ordersInclude | null
    /**
     * The data needed to create a orders.
     */
    data: XOR<ordersCreateInput, ordersUncheckedCreateInput>
  }


  /**
   * orders createMany
   */
  export type ordersCreateManyArgs = {
    /**
     * The data used to create many orders.
     */
    data: Enumerable<ordersCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * orders update
   */
  export type ordersUpdateArgs = {
    /**
     * Select specific fields to fetch from the orders
     */
    select?: ordersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ordersInclude | null
    /**
     * The data needed to update a orders.
     */
    data: XOR<ordersUpdateInput, ordersUncheckedUpdateInput>
    /**
     * Choose, which orders to update.
     */
    where: ordersWhereUniqueInput
  }


  /**
   * orders updateMany
   */
  export type ordersUpdateManyArgs = {
    /**
     * The data used to update orders.
     */
    data: XOR<ordersUpdateManyMutationInput, ordersUncheckedUpdateManyInput>
    /**
     * Filter which orders to update
     */
    where?: ordersWhereInput
  }


  /**
   * orders upsert
   */
  export type ordersUpsertArgs = {
    /**
     * Select specific fields to fetch from the orders
     */
    select?: ordersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ordersInclude | null
    /**
     * The filter to search for the orders to update in case it exists.
     */
    where: ordersWhereUniqueInput
    /**
     * In case the orders found by the `where` argument doesn't exist, create a new orders with this data.
     */
    create: XOR<ordersCreateInput, ordersUncheckedCreateInput>
    /**
     * In case the orders was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ordersUpdateInput, ordersUncheckedUpdateInput>
  }


  /**
   * orders delete
   */
  export type ordersDeleteArgs = {
    /**
     * Select specific fields to fetch from the orders
     */
    select?: ordersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ordersInclude | null
    /**
     * Filter which orders to delete.
     */
    where: ordersWhereUniqueInput
  }


  /**
   * orders deleteMany
   */
  export type ordersDeleteManyArgs = {
    /**
     * Filter which orders to delete
     */
    where?: ordersWhereInput
  }


  /**
   * orders without action
   */
  export type ordersArgs = {
    /**
     * Select specific fields to fetch from the orders
     */
    select?: ordersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ordersInclude | null
  }



  /**
   * Model products
   */


  export type AggregateProducts = {
    _count: ProductsCountAggregateOutputType | null
    _avg: ProductsAvgAggregateOutputType | null
    _sum: ProductsSumAggregateOutputType | null
    _min: ProductsMinAggregateOutputType | null
    _max: ProductsMaxAggregateOutputType | null
  }

  export type ProductsAvgAggregateOutputType = {
    id: number | null
    price: number | null
  }

  export type ProductsSumAggregateOutputType = {
    id: number | null
    price: number | null
  }

  export type ProductsMinAggregateOutputType = {
    id: number | null
    name: string | null
    price: number | null
    description: string | null
  }

  export type ProductsMaxAggregateOutputType = {
    id: number | null
    name: string | null
    price: number | null
    description: string | null
  }

  export type ProductsCountAggregateOutputType = {
    id: number
    name: number
    price: number
    description: number
    _all: number
  }


  export type ProductsAvgAggregateInputType = {
    id?: true
    price?: true
  }

  export type ProductsSumAggregateInputType = {
    id?: true
    price?: true
  }

  export type ProductsMinAggregateInputType = {
    id?: true
    name?: true
    price?: true
    description?: true
  }

  export type ProductsMaxAggregateInputType = {
    id?: true
    name?: true
    price?: true
    description?: true
  }

  export type ProductsCountAggregateInputType = {
    id?: true
    name?: true
    price?: true
    description?: true
    _all?: true
  }

  export type ProductsAggregateArgs = {
    /**
     * Filter which products to aggregate.
     */
    where?: productsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of products to fetch.
     */
    orderBy?: Enumerable<productsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: productsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned products
    **/
    _count?: true | ProductsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProductsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProductsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProductsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProductsMaxAggregateInputType
  }

  export type GetProductsAggregateType<T extends ProductsAggregateArgs> = {
        [P in keyof T & keyof AggregateProducts]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProducts[P]>
      : GetScalarType<T[P], AggregateProducts[P]>
  }




  export type ProductsGroupByArgs = {
    where?: productsWhereInput
    orderBy?: Enumerable<productsOrderByWithAggregationInput>
    by: ProductsScalarFieldEnum[]
    having?: productsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProductsCountAggregateInputType | true
    _avg?: ProductsAvgAggregateInputType
    _sum?: ProductsSumAggregateInputType
    _min?: ProductsMinAggregateInputType
    _max?: ProductsMaxAggregateInputType
  }


  export type ProductsGroupByOutputType = {
    id: number
    name: string
    price: number
    description: string | null
    _count: ProductsCountAggregateOutputType | null
    _avg: ProductsAvgAggregateOutputType | null
    _sum: ProductsSumAggregateOutputType | null
    _min: ProductsMinAggregateOutputType | null
    _max: ProductsMaxAggregateOutputType | null
  }

  type GetProductsGroupByPayload<T extends ProductsGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ProductsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProductsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProductsGroupByOutputType[P]>
            : GetScalarType<T[P], ProductsGroupByOutputType[P]>
        }
      >
    >


  export type productsSelect = {
    id?: boolean
    name?: boolean
    price?: boolean
    description?: boolean
    newOrders?: boolean | products$newOrdersArgs
    _count?: boolean | ProductsCountOutputTypeArgs
  }


  export type productsInclude = {
    newOrders?: boolean | products$newOrdersArgs
    _count?: boolean | ProductsCountOutputTypeArgs
  }

  export type productsGetPayload<S extends boolean | null | undefined | productsArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? products :
    S extends undefined ? never :
    S extends { include: any } & (productsArgs | productsFindManyArgs)
    ? products  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'newOrders' ? Array < newOrdersGetPayload<S['include'][P]>>  :
        P extends '_count' ? ProductsCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (productsArgs | productsFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'newOrders' ? Array < newOrdersGetPayload<S['select'][P]>>  :
        P extends '_count' ? ProductsCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof products ? products[P] : never
  } 
      : products


  type productsCountArgs = 
    Omit<productsFindManyArgs, 'select' | 'include'> & {
      select?: ProductsCountAggregateInputType | true
    }

  export interface productsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Products that matches the filter.
     * @param {productsFindUniqueArgs} args - Arguments to find a Products
     * @example
     * // Get one Products
     * const products = await prisma.products.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends productsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, productsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'products'> extends True ? Prisma__productsClient<productsGetPayload<T>> : Prisma__productsClient<productsGetPayload<T> | null, null>

    /**
     * Find one Products that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {productsFindUniqueOrThrowArgs} args - Arguments to find a Products
     * @example
     * // Get one Products
     * const products = await prisma.products.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends productsFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, productsFindUniqueOrThrowArgs>
    ): Prisma__productsClient<productsGetPayload<T>>

    /**
     * Find the first Products that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productsFindFirstArgs} args - Arguments to find a Products
     * @example
     * // Get one Products
     * const products = await prisma.products.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends productsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, productsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'products'> extends True ? Prisma__productsClient<productsGetPayload<T>> : Prisma__productsClient<productsGetPayload<T> | null, null>

    /**
     * Find the first Products that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productsFindFirstOrThrowArgs} args - Arguments to find a Products
     * @example
     * // Get one Products
     * const products = await prisma.products.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends productsFindFirstOrThrowArgs>(
      args?: SelectSubset<T, productsFindFirstOrThrowArgs>
    ): Prisma__productsClient<productsGetPayload<T>>

    /**
     * Find zero or more Products that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Products
     * const products = await prisma.products.findMany()
     * 
     * // Get first 10 Products
     * const products = await prisma.products.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const productsWithIdOnly = await prisma.products.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends productsFindManyArgs>(
      args?: SelectSubset<T, productsFindManyArgs>
    ): PrismaPromise<Array<productsGetPayload<T>>>

    /**
     * Create a Products.
     * @param {productsCreateArgs} args - Arguments to create a Products.
     * @example
     * // Create one Products
     * const Products = await prisma.products.create({
     *   data: {
     *     // ... data to create a Products
     *   }
     * })
     * 
    **/
    create<T extends productsCreateArgs>(
      args: SelectSubset<T, productsCreateArgs>
    ): Prisma__productsClient<productsGetPayload<T>>

    /**
     * Create many Products.
     *     @param {productsCreateManyArgs} args - Arguments to create many Products.
     *     @example
     *     // Create many Products
     *     const products = await prisma.products.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends productsCreateManyArgs>(
      args?: SelectSubset<T, productsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Products.
     * @param {productsDeleteArgs} args - Arguments to delete one Products.
     * @example
     * // Delete one Products
     * const Products = await prisma.products.delete({
     *   where: {
     *     // ... filter to delete one Products
     *   }
     * })
     * 
    **/
    delete<T extends productsDeleteArgs>(
      args: SelectSubset<T, productsDeleteArgs>
    ): Prisma__productsClient<productsGetPayload<T>>

    /**
     * Update one Products.
     * @param {productsUpdateArgs} args - Arguments to update one Products.
     * @example
     * // Update one Products
     * const products = await prisma.products.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends productsUpdateArgs>(
      args: SelectSubset<T, productsUpdateArgs>
    ): Prisma__productsClient<productsGetPayload<T>>

    /**
     * Delete zero or more Products.
     * @param {productsDeleteManyArgs} args - Arguments to filter Products to delete.
     * @example
     * // Delete a few Products
     * const { count } = await prisma.products.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends productsDeleteManyArgs>(
      args?: SelectSubset<T, productsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Products
     * const products = await prisma.products.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends productsUpdateManyArgs>(
      args: SelectSubset<T, productsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Products.
     * @param {productsUpsertArgs} args - Arguments to update or create a Products.
     * @example
     * // Update or create a Products
     * const products = await prisma.products.upsert({
     *   create: {
     *     // ... data to create a Products
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Products we want to update
     *   }
     * })
    **/
    upsert<T extends productsUpsertArgs>(
      args: SelectSubset<T, productsUpsertArgs>
    ): Prisma__productsClient<productsGetPayload<T>>

    /**
     * Count the number of Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productsCountArgs} args - Arguments to filter Products to count.
     * @example
     * // Count the number of Products
     * const count = await prisma.products.count({
     *   where: {
     *     // ... the filter for the Products we want to count
     *   }
     * })
    **/
    count<T extends productsCountArgs>(
      args?: Subset<T, productsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProductsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProductsAggregateArgs>(args: Subset<T, ProductsAggregateArgs>): PrismaPromise<GetProductsAggregateType<T>>

    /**
     * Group by Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProductsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProductsGroupByArgs['orderBy'] }
        : { orderBy?: ProductsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProductsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductsGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for products.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__productsClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    newOrders<T extends products$newOrdersArgs= {}>(args?: Subset<T, products$newOrdersArgs>): PrismaPromise<Array<newOrdersGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * products base type for findUnique actions
   */
  export type productsFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the products
     */
    select?: productsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productsInclude | null
    /**
     * Filter, which products to fetch.
     */
    where: productsWhereUniqueInput
  }

  /**
   * products findUnique
   */
  export interface productsFindUniqueArgs extends productsFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * products findUniqueOrThrow
   */
  export type productsFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the products
     */
    select?: productsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productsInclude | null
    /**
     * Filter, which products to fetch.
     */
    where: productsWhereUniqueInput
  }


  /**
   * products base type for findFirst actions
   */
  export type productsFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the products
     */
    select?: productsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productsInclude | null
    /**
     * Filter, which products to fetch.
     */
    where?: productsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of products to fetch.
     */
    orderBy?: Enumerable<productsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for products.
     */
    cursor?: productsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of products.
     */
    distinct?: Enumerable<ProductsScalarFieldEnum>
  }

  /**
   * products findFirst
   */
  export interface productsFindFirstArgs extends productsFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * products findFirstOrThrow
   */
  export type productsFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the products
     */
    select?: productsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productsInclude | null
    /**
     * Filter, which products to fetch.
     */
    where?: productsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of products to fetch.
     */
    orderBy?: Enumerable<productsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for products.
     */
    cursor?: productsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of products.
     */
    distinct?: Enumerable<ProductsScalarFieldEnum>
  }


  /**
   * products findMany
   */
  export type productsFindManyArgs = {
    /**
     * Select specific fields to fetch from the products
     */
    select?: productsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productsInclude | null
    /**
     * Filter, which products to fetch.
     */
    where?: productsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of products to fetch.
     */
    orderBy?: Enumerable<productsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing products.
     */
    cursor?: productsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` products.
     */
    skip?: number
    distinct?: Enumerable<ProductsScalarFieldEnum>
  }


  /**
   * products create
   */
  export type productsCreateArgs = {
    /**
     * Select specific fields to fetch from the products
     */
    select?: productsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productsInclude | null
    /**
     * The data needed to create a products.
     */
    data: XOR<productsCreateInput, productsUncheckedCreateInput>
  }


  /**
   * products createMany
   */
  export type productsCreateManyArgs = {
    /**
     * The data used to create many products.
     */
    data: Enumerable<productsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * products update
   */
  export type productsUpdateArgs = {
    /**
     * Select specific fields to fetch from the products
     */
    select?: productsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productsInclude | null
    /**
     * The data needed to update a products.
     */
    data: XOR<productsUpdateInput, productsUncheckedUpdateInput>
    /**
     * Choose, which products to update.
     */
    where: productsWhereUniqueInput
  }


  /**
   * products updateMany
   */
  export type productsUpdateManyArgs = {
    /**
     * The data used to update products.
     */
    data: XOR<productsUpdateManyMutationInput, productsUncheckedUpdateManyInput>
    /**
     * Filter which products to update
     */
    where?: productsWhereInput
  }


  /**
   * products upsert
   */
  export type productsUpsertArgs = {
    /**
     * Select specific fields to fetch from the products
     */
    select?: productsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productsInclude | null
    /**
     * The filter to search for the products to update in case it exists.
     */
    where: productsWhereUniqueInput
    /**
     * In case the products found by the `where` argument doesn't exist, create a new products with this data.
     */
    create: XOR<productsCreateInput, productsUncheckedCreateInput>
    /**
     * In case the products was found with the provided `where` argument, update it with this data.
     */
    update: XOR<productsUpdateInput, productsUncheckedUpdateInput>
  }


  /**
   * products delete
   */
  export type productsDeleteArgs = {
    /**
     * Select specific fields to fetch from the products
     */
    select?: productsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productsInclude | null
    /**
     * Filter which products to delete.
     */
    where: productsWhereUniqueInput
  }


  /**
   * products deleteMany
   */
  export type productsDeleteManyArgs = {
    /**
     * Filter which products to delete
     */
    where?: productsWhereInput
  }


  /**
   * products.newOrders
   */
  export type products$newOrdersArgs = {
    /**
     * Select specific fields to fetch from the newOrders
     */
    select?: newOrdersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: newOrdersInclude | null
    where?: newOrdersWhereInput
    orderBy?: Enumerable<newOrdersOrderByWithRelationInput>
    cursor?: newOrdersWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<NewOrdersScalarFieldEnum>
  }


  /**
   * products without action
   */
  export type productsArgs = {
    /**
     * Select specific fields to fetch from the products
     */
    select?: productsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productsInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const CakesScalarFieldEnum: {
    id: 'id',
    name: 'name',
    price: 'price',
    image: 'image',
    description: 'description'
  };

  export type CakesScalarFieldEnum = (typeof CakesScalarFieldEnum)[keyof typeof CakesScalarFieldEnum]


  export const ClientsScalarFieldEnum: {
    id: 'id',
    name: 'name',
    address: 'address',
    phone: 'phone'
  };

  export type ClientsScalarFieldEnum = (typeof ClientsScalarFieldEnum)[keyof typeof ClientsScalarFieldEnum]


  export const NewClientsScalarFieldEnum: {
    id: 'id',
    name: 'name',
    address: 'address'
  };

  export type NewClientsScalarFieldEnum = (typeof NewClientsScalarFieldEnum)[keyof typeof NewClientsScalarFieldEnum]


  export const NewOrdersScalarFieldEnum: {
    id: 'id',
    clientId: 'clientId',
    productsId: 'productsId',
    quantity: 'quantity',
    createdAt: 'createdAt',
    totalPrice: 'totalPrice'
  };

  export type NewOrdersScalarFieldEnum = (typeof NewOrdersScalarFieldEnum)[keyof typeof NewOrdersScalarFieldEnum]


  export const OrdersScalarFieldEnum: {
    id: 'id',
    clientId: 'clientId',
    cakeId: 'cakeId',
    quantity: 'quantity',
    createdAt: 'createdAt',
    totalPrice: 'totalPrice'
  };

  export type OrdersScalarFieldEnum = (typeof OrdersScalarFieldEnum)[keyof typeof OrdersScalarFieldEnum]


  export const ProductsScalarFieldEnum: {
    id: 'id',
    name: 'name',
    price: 'price',
    description: 'description'
  };

  export type ProductsScalarFieldEnum = (typeof ProductsScalarFieldEnum)[keyof typeof ProductsScalarFieldEnum]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  /**
   * Deep Input Types
   */


  export type cakesWhereInput = {
    AND?: Enumerable<cakesWhereInput>
    OR?: Enumerable<cakesWhereInput>
    NOT?: Enumerable<cakesWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    price?: FloatFilter | number
    image?: StringFilter | string
    description?: StringNullableFilter | string | null
  }

  export type cakesOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    price?: SortOrder
    image?: SortOrder
    description?: SortOrder
  }

  export type cakesWhereUniqueInput = {
    id?: number
    name?: string
  }

  export type cakesOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    price?: SortOrder
    image?: SortOrder
    description?: SortOrder
    _count?: cakesCountOrderByAggregateInput
    _avg?: cakesAvgOrderByAggregateInput
    _max?: cakesMaxOrderByAggregateInput
    _min?: cakesMinOrderByAggregateInput
    _sum?: cakesSumOrderByAggregateInput
  }

  export type cakesScalarWhereWithAggregatesInput = {
    AND?: Enumerable<cakesScalarWhereWithAggregatesInput>
    OR?: Enumerable<cakesScalarWhereWithAggregatesInput>
    NOT?: Enumerable<cakesScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    price?: FloatWithAggregatesFilter | number
    image?: StringWithAggregatesFilter | string
    description?: StringNullableWithAggregatesFilter | string | null
  }

  export type clientsWhereInput = {
    AND?: Enumerable<clientsWhereInput>
    OR?: Enumerable<clientsWhereInput>
    NOT?: Enumerable<clientsWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    address?: StringFilter | string
    phone?: StringFilter | string
    orders?: OrdersListRelationFilter
  }

  export type clientsOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrder
    phone?: SortOrder
    orders?: ordersOrderByRelationAggregateInput
  }

  export type clientsWhereUniqueInput = {
    id?: number
    name?: string
    phone?: string
  }

  export type clientsOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrder
    phone?: SortOrder
    _count?: clientsCountOrderByAggregateInput
    _avg?: clientsAvgOrderByAggregateInput
    _max?: clientsMaxOrderByAggregateInput
    _min?: clientsMinOrderByAggregateInput
    _sum?: clientsSumOrderByAggregateInput
  }

  export type clientsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<clientsScalarWhereWithAggregatesInput>
    OR?: Enumerable<clientsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<clientsScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    address?: StringWithAggregatesFilter | string
    phone?: StringWithAggregatesFilter | string
  }

  export type newClientsWhereInput = {
    AND?: Enumerable<newClientsWhereInput>
    OR?: Enumerable<newClientsWhereInput>
    NOT?: Enumerable<newClientsWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    address?: StringFilter | string
    newOrders?: NewOrdersListRelationFilter
  }

  export type newClientsOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrder
    newOrders?: newOrdersOrderByRelationAggregateInput
  }

  export type newClientsWhereUniqueInput = {
    id?: number
    name?: string
  }

  export type newClientsOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrder
    _count?: newClientsCountOrderByAggregateInput
    _avg?: newClientsAvgOrderByAggregateInput
    _max?: newClientsMaxOrderByAggregateInput
    _min?: newClientsMinOrderByAggregateInput
    _sum?: newClientsSumOrderByAggregateInput
  }

  export type newClientsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<newClientsScalarWhereWithAggregatesInput>
    OR?: Enumerable<newClientsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<newClientsScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    address?: StringWithAggregatesFilter | string
  }

  export type newOrdersWhereInput = {
    AND?: Enumerable<newOrdersWhereInput>
    OR?: Enumerable<newOrdersWhereInput>
    NOT?: Enumerable<newOrdersWhereInput>
    id?: IntFilter | number
    clientId?: IntFilter | number
    productsId?: IntFilter | number
    quantity?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    totalPrice?: DecimalFilter | Decimal | DecimalJsLike | number | string
    newClients?: XOR<NewClientsRelationFilter, newClientsWhereInput>
    products?: XOR<ProductsRelationFilter, productsWhereInput>
  }

  export type newOrdersOrderByWithRelationInput = {
    id?: SortOrder
    clientId?: SortOrder
    productsId?: SortOrder
    quantity?: SortOrder
    createdAt?: SortOrder
    totalPrice?: SortOrder
    newClients?: newClientsOrderByWithRelationInput
    products?: productsOrderByWithRelationInput
  }

  export type newOrdersWhereUniqueInput = {
    id?: number
  }

  export type newOrdersOrderByWithAggregationInput = {
    id?: SortOrder
    clientId?: SortOrder
    productsId?: SortOrder
    quantity?: SortOrder
    createdAt?: SortOrder
    totalPrice?: SortOrder
    _count?: newOrdersCountOrderByAggregateInput
    _avg?: newOrdersAvgOrderByAggregateInput
    _max?: newOrdersMaxOrderByAggregateInput
    _min?: newOrdersMinOrderByAggregateInput
    _sum?: newOrdersSumOrderByAggregateInput
  }

  export type newOrdersScalarWhereWithAggregatesInput = {
    AND?: Enumerable<newOrdersScalarWhereWithAggregatesInput>
    OR?: Enumerable<newOrdersScalarWhereWithAggregatesInput>
    NOT?: Enumerable<newOrdersScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    clientId?: IntWithAggregatesFilter | number
    productsId?: IntWithAggregatesFilter | number
    quantity?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    totalPrice?: DecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
  }

  export type ordersWhereInput = {
    AND?: Enumerable<ordersWhereInput>
    OR?: Enumerable<ordersWhereInput>
    NOT?: Enumerable<ordersWhereInput>
    id?: IntFilter | number
    clientId?: IntFilter | number
    cakeId?: IntFilter | number
    quantity?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    totalPrice?: FloatFilter | number
    clients?: XOR<ClientsRelationFilter, clientsWhereInput>
  }

  export type ordersOrderByWithRelationInput = {
    id?: SortOrder
    clientId?: SortOrder
    cakeId?: SortOrder
    quantity?: SortOrder
    createdAt?: SortOrder
    totalPrice?: SortOrder
    clients?: clientsOrderByWithRelationInput
  }

  export type ordersWhereUniqueInput = {
    id?: number
  }

  export type ordersOrderByWithAggregationInput = {
    id?: SortOrder
    clientId?: SortOrder
    cakeId?: SortOrder
    quantity?: SortOrder
    createdAt?: SortOrder
    totalPrice?: SortOrder
    _count?: ordersCountOrderByAggregateInput
    _avg?: ordersAvgOrderByAggregateInput
    _max?: ordersMaxOrderByAggregateInput
    _min?: ordersMinOrderByAggregateInput
    _sum?: ordersSumOrderByAggregateInput
  }

  export type ordersScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ordersScalarWhereWithAggregatesInput>
    OR?: Enumerable<ordersScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ordersScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    clientId?: IntWithAggregatesFilter | number
    cakeId?: IntWithAggregatesFilter | number
    quantity?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    totalPrice?: FloatWithAggregatesFilter | number
  }

  export type productsWhereInput = {
    AND?: Enumerable<productsWhereInput>
    OR?: Enumerable<productsWhereInput>
    NOT?: Enumerable<productsWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    price?: FloatFilter | number
    description?: StringNullableFilter | string | null
    newOrders?: NewOrdersListRelationFilter
  }

  export type productsOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    price?: SortOrder
    description?: SortOrder
    newOrders?: newOrdersOrderByRelationAggregateInput
  }

  export type productsWhereUniqueInput = {
    id?: number
    name?: string
  }

  export type productsOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    price?: SortOrder
    description?: SortOrder
    _count?: productsCountOrderByAggregateInput
    _avg?: productsAvgOrderByAggregateInput
    _max?: productsMaxOrderByAggregateInput
    _min?: productsMinOrderByAggregateInput
    _sum?: productsSumOrderByAggregateInput
  }

  export type productsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<productsScalarWhereWithAggregatesInput>
    OR?: Enumerable<productsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<productsScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    price?: FloatWithAggregatesFilter | number
    description?: StringNullableWithAggregatesFilter | string | null
  }

  export type cakesCreateInput = {
    name: string
    price: number
    image: string
    description?: string | null
  }

  export type cakesUncheckedCreateInput = {
    id?: number
    name: string
    price: number
    image: string
    description?: string | null
  }

  export type cakesUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    image?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type cakesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    image?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type cakesCreateManyInput = {
    id?: number
    name: string
    price: number
    image: string
    description?: string | null
  }

  export type cakesUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    image?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type cakesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    image?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type clientsCreateInput = {
    name: string
    address: string
    phone: string
    orders?: ordersCreateNestedManyWithoutClientsInput
  }

  export type clientsUncheckedCreateInput = {
    id?: number
    name: string
    address: string
    phone: string
    orders?: ordersUncheckedCreateNestedManyWithoutClientsInput
  }

  export type clientsUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    orders?: ordersUpdateManyWithoutClientsNestedInput
  }

  export type clientsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    orders?: ordersUncheckedUpdateManyWithoutClientsNestedInput
  }

  export type clientsCreateManyInput = {
    id?: number
    name: string
    address: string
    phone: string
  }

  export type clientsUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
  }

  export type clientsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
  }

  export type newClientsCreateInput = {
    name: string
    address: string
    newOrders?: newOrdersCreateNestedManyWithoutNewClientsInput
  }

  export type newClientsUncheckedCreateInput = {
    id?: number
    name: string
    address: string
    newOrders?: newOrdersUncheckedCreateNestedManyWithoutNewClientsInput
  }

  export type newClientsUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    newOrders?: newOrdersUpdateManyWithoutNewClientsNestedInput
  }

  export type newClientsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    newOrders?: newOrdersUncheckedUpdateManyWithoutNewClientsNestedInput
  }

  export type newClientsCreateManyInput = {
    id?: number
    name: string
    address: string
  }

  export type newClientsUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
  }

  export type newClientsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
  }

  export type newOrdersCreateInput = {
    quantity: number
    createdAt?: Date | string
    totalPrice: Decimal | DecimalJsLike | number | string
    newClients: newClientsCreateNestedOneWithoutNewOrdersInput
    products: productsCreateNestedOneWithoutNewOrdersInput
  }

  export type newOrdersUncheckedCreateInput = {
    id?: number
    clientId: number
    productsId: number
    quantity: number
    createdAt?: Date | string
    totalPrice: Decimal | DecimalJsLike | number | string
  }

  export type newOrdersUpdateInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    totalPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    newClients?: newClientsUpdateOneRequiredWithoutNewOrdersNestedInput
    products?: productsUpdateOneRequiredWithoutNewOrdersNestedInput
  }

  export type newOrdersUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    clientId?: IntFieldUpdateOperationsInput | number
    productsId?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    totalPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type newOrdersCreateManyInput = {
    id?: number
    clientId: number
    productsId: number
    quantity: number
    createdAt?: Date | string
    totalPrice: Decimal | DecimalJsLike | number | string
  }

  export type newOrdersUpdateManyMutationInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    totalPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type newOrdersUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    clientId?: IntFieldUpdateOperationsInput | number
    productsId?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    totalPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type ordersCreateInput = {
    cakeId: number
    quantity: number
    createdAt?: Date | string
    totalPrice: number
    clients: clientsCreateNestedOneWithoutOrdersInput
  }

  export type ordersUncheckedCreateInput = {
    id?: number
    clientId: number
    cakeId: number
    quantity: number
    createdAt?: Date | string
    totalPrice: number
  }

  export type ordersUpdateInput = {
    cakeId?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    totalPrice?: FloatFieldUpdateOperationsInput | number
    clients?: clientsUpdateOneRequiredWithoutOrdersNestedInput
  }

  export type ordersUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    clientId?: IntFieldUpdateOperationsInput | number
    cakeId?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    totalPrice?: FloatFieldUpdateOperationsInput | number
  }

  export type ordersCreateManyInput = {
    id?: number
    clientId: number
    cakeId: number
    quantity: number
    createdAt?: Date | string
    totalPrice: number
  }

  export type ordersUpdateManyMutationInput = {
    cakeId?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    totalPrice?: FloatFieldUpdateOperationsInput | number
  }

  export type ordersUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    clientId?: IntFieldUpdateOperationsInput | number
    cakeId?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    totalPrice?: FloatFieldUpdateOperationsInput | number
  }

  export type productsCreateInput = {
    name: string
    price: number
    description?: string | null
    newOrders?: newOrdersCreateNestedManyWithoutProductsInput
  }

  export type productsUncheckedCreateInput = {
    id?: number
    name: string
    price: number
    description?: string | null
    newOrders?: newOrdersUncheckedCreateNestedManyWithoutProductsInput
  }

  export type productsUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    newOrders?: newOrdersUpdateManyWithoutProductsNestedInput
  }

  export type productsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    newOrders?: newOrdersUncheckedUpdateManyWithoutProductsNestedInput
  }

  export type productsCreateManyInput = {
    id?: number
    name: string
    price: number
    description?: string | null
  }

  export type productsUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type productsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type FloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableFilter | string | null
  }

  export type cakesCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    price?: SortOrder
    image?: SortOrder
    description?: SortOrder
  }

  export type cakesAvgOrderByAggregateInput = {
    id?: SortOrder
    price?: SortOrder
  }

  export type cakesMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    price?: SortOrder
    image?: SortOrder
    description?: SortOrder
  }

  export type cakesMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    price?: SortOrder
    image?: SortOrder
    description?: SortOrder
  }

  export type cakesSumOrderByAggregateInput = {
    id?: SortOrder
    price?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type FloatWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedFloatFilter
    _min?: NestedFloatFilter
    _max?: NestedFloatFilter
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type OrdersListRelationFilter = {
    every?: ordersWhereInput
    some?: ordersWhereInput
    none?: ordersWhereInput
  }

  export type ordersOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type clientsCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrder
    phone?: SortOrder
  }

  export type clientsAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type clientsMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrder
    phone?: SortOrder
  }

  export type clientsMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrder
    phone?: SortOrder
  }

  export type clientsSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type NewOrdersListRelationFilter = {
    every?: newOrdersWhereInput
    some?: newOrdersWhereInput
    none?: newOrdersWhereInput
  }

  export type newOrdersOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type newClientsCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrder
  }

  export type newClientsAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type newClientsMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrder
  }

  export type newClientsMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrder
  }

  export type newClientsSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type DecimalFilter = {
    equals?: Decimal | DecimalJsLike | number | string
    in?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string>
    notIn?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string>
    lt?: Decimal | DecimalJsLike | number | string
    lte?: Decimal | DecimalJsLike | number | string
    gt?: Decimal | DecimalJsLike | number | string
    gte?: Decimal | DecimalJsLike | number | string
    not?: NestedDecimalFilter | Decimal | DecimalJsLike | number | string
  }

  export type NewClientsRelationFilter = {
    is?: newClientsWhereInput
    isNot?: newClientsWhereInput
  }

  export type ProductsRelationFilter = {
    is?: productsWhereInput
    isNot?: productsWhereInput
  }

  export type newOrdersCountOrderByAggregateInput = {
    id?: SortOrder
    clientId?: SortOrder
    productsId?: SortOrder
    quantity?: SortOrder
    createdAt?: SortOrder
    totalPrice?: SortOrder
  }

  export type newOrdersAvgOrderByAggregateInput = {
    id?: SortOrder
    clientId?: SortOrder
    productsId?: SortOrder
    quantity?: SortOrder
    totalPrice?: SortOrder
  }

  export type newOrdersMaxOrderByAggregateInput = {
    id?: SortOrder
    clientId?: SortOrder
    productsId?: SortOrder
    quantity?: SortOrder
    createdAt?: SortOrder
    totalPrice?: SortOrder
  }

  export type newOrdersMinOrderByAggregateInput = {
    id?: SortOrder
    clientId?: SortOrder
    productsId?: SortOrder
    quantity?: SortOrder
    createdAt?: SortOrder
    totalPrice?: SortOrder
  }

  export type newOrdersSumOrderByAggregateInput = {
    id?: SortOrder
    clientId?: SortOrder
    productsId?: SortOrder
    quantity?: SortOrder
    totalPrice?: SortOrder
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type DecimalWithAggregatesFilter = {
    equals?: Decimal | DecimalJsLike | number | string
    in?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string>
    notIn?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string>
    lt?: Decimal | DecimalJsLike | number | string
    lte?: Decimal | DecimalJsLike | number | string
    gt?: Decimal | DecimalJsLike | number | string
    gte?: Decimal | DecimalJsLike | number | string
    not?: NestedDecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter
    _avg?: NestedDecimalFilter
    _sum?: NestedDecimalFilter
    _min?: NestedDecimalFilter
    _max?: NestedDecimalFilter
  }

  export type ClientsRelationFilter = {
    is?: clientsWhereInput
    isNot?: clientsWhereInput
  }

  export type ordersCountOrderByAggregateInput = {
    id?: SortOrder
    clientId?: SortOrder
    cakeId?: SortOrder
    quantity?: SortOrder
    createdAt?: SortOrder
    totalPrice?: SortOrder
  }

  export type ordersAvgOrderByAggregateInput = {
    id?: SortOrder
    clientId?: SortOrder
    cakeId?: SortOrder
    quantity?: SortOrder
    totalPrice?: SortOrder
  }

  export type ordersMaxOrderByAggregateInput = {
    id?: SortOrder
    clientId?: SortOrder
    cakeId?: SortOrder
    quantity?: SortOrder
    createdAt?: SortOrder
    totalPrice?: SortOrder
  }

  export type ordersMinOrderByAggregateInput = {
    id?: SortOrder
    clientId?: SortOrder
    cakeId?: SortOrder
    quantity?: SortOrder
    createdAt?: SortOrder
    totalPrice?: SortOrder
  }

  export type ordersSumOrderByAggregateInput = {
    id?: SortOrder
    clientId?: SortOrder
    cakeId?: SortOrder
    quantity?: SortOrder
    totalPrice?: SortOrder
  }

  export type productsCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    price?: SortOrder
    description?: SortOrder
  }

  export type productsAvgOrderByAggregateInput = {
    id?: SortOrder
    price?: SortOrder
  }

  export type productsMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    price?: SortOrder
    description?: SortOrder
  }

  export type productsMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    price?: SortOrder
    description?: SortOrder
  }

  export type productsSumOrderByAggregateInput = {
    id?: SortOrder
    price?: SortOrder
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ordersCreateNestedManyWithoutClientsInput = {
    create?: XOR<Enumerable<ordersCreateWithoutClientsInput>, Enumerable<ordersUncheckedCreateWithoutClientsInput>>
    connectOrCreate?: Enumerable<ordersCreateOrConnectWithoutClientsInput>
    createMany?: ordersCreateManyClientsInputEnvelope
    connect?: Enumerable<ordersWhereUniqueInput>
  }

  export type ordersUncheckedCreateNestedManyWithoutClientsInput = {
    create?: XOR<Enumerable<ordersCreateWithoutClientsInput>, Enumerable<ordersUncheckedCreateWithoutClientsInput>>
    connectOrCreate?: Enumerable<ordersCreateOrConnectWithoutClientsInput>
    createMany?: ordersCreateManyClientsInputEnvelope
    connect?: Enumerable<ordersWhereUniqueInput>
  }

  export type ordersUpdateManyWithoutClientsNestedInput = {
    create?: XOR<Enumerable<ordersCreateWithoutClientsInput>, Enumerable<ordersUncheckedCreateWithoutClientsInput>>
    connectOrCreate?: Enumerable<ordersCreateOrConnectWithoutClientsInput>
    upsert?: Enumerable<ordersUpsertWithWhereUniqueWithoutClientsInput>
    createMany?: ordersCreateManyClientsInputEnvelope
    set?: Enumerable<ordersWhereUniqueInput>
    disconnect?: Enumerable<ordersWhereUniqueInput>
    delete?: Enumerable<ordersWhereUniqueInput>
    connect?: Enumerable<ordersWhereUniqueInput>
    update?: Enumerable<ordersUpdateWithWhereUniqueWithoutClientsInput>
    updateMany?: Enumerable<ordersUpdateManyWithWhereWithoutClientsInput>
    deleteMany?: Enumerable<ordersScalarWhereInput>
  }

  export type ordersUncheckedUpdateManyWithoutClientsNestedInput = {
    create?: XOR<Enumerable<ordersCreateWithoutClientsInput>, Enumerable<ordersUncheckedCreateWithoutClientsInput>>
    connectOrCreate?: Enumerable<ordersCreateOrConnectWithoutClientsInput>
    upsert?: Enumerable<ordersUpsertWithWhereUniqueWithoutClientsInput>
    createMany?: ordersCreateManyClientsInputEnvelope
    set?: Enumerable<ordersWhereUniqueInput>
    disconnect?: Enumerable<ordersWhereUniqueInput>
    delete?: Enumerable<ordersWhereUniqueInput>
    connect?: Enumerable<ordersWhereUniqueInput>
    update?: Enumerable<ordersUpdateWithWhereUniqueWithoutClientsInput>
    updateMany?: Enumerable<ordersUpdateManyWithWhereWithoutClientsInput>
    deleteMany?: Enumerable<ordersScalarWhereInput>
  }

  export type newOrdersCreateNestedManyWithoutNewClientsInput = {
    create?: XOR<Enumerable<newOrdersCreateWithoutNewClientsInput>, Enumerable<newOrdersUncheckedCreateWithoutNewClientsInput>>
    connectOrCreate?: Enumerable<newOrdersCreateOrConnectWithoutNewClientsInput>
    createMany?: newOrdersCreateManyNewClientsInputEnvelope
    connect?: Enumerable<newOrdersWhereUniqueInput>
  }

  export type newOrdersUncheckedCreateNestedManyWithoutNewClientsInput = {
    create?: XOR<Enumerable<newOrdersCreateWithoutNewClientsInput>, Enumerable<newOrdersUncheckedCreateWithoutNewClientsInput>>
    connectOrCreate?: Enumerable<newOrdersCreateOrConnectWithoutNewClientsInput>
    createMany?: newOrdersCreateManyNewClientsInputEnvelope
    connect?: Enumerable<newOrdersWhereUniqueInput>
  }

  export type newOrdersUpdateManyWithoutNewClientsNestedInput = {
    create?: XOR<Enumerable<newOrdersCreateWithoutNewClientsInput>, Enumerable<newOrdersUncheckedCreateWithoutNewClientsInput>>
    connectOrCreate?: Enumerable<newOrdersCreateOrConnectWithoutNewClientsInput>
    upsert?: Enumerable<newOrdersUpsertWithWhereUniqueWithoutNewClientsInput>
    createMany?: newOrdersCreateManyNewClientsInputEnvelope
    set?: Enumerable<newOrdersWhereUniqueInput>
    disconnect?: Enumerable<newOrdersWhereUniqueInput>
    delete?: Enumerable<newOrdersWhereUniqueInput>
    connect?: Enumerable<newOrdersWhereUniqueInput>
    update?: Enumerable<newOrdersUpdateWithWhereUniqueWithoutNewClientsInput>
    updateMany?: Enumerable<newOrdersUpdateManyWithWhereWithoutNewClientsInput>
    deleteMany?: Enumerable<newOrdersScalarWhereInput>
  }

  export type newOrdersUncheckedUpdateManyWithoutNewClientsNestedInput = {
    create?: XOR<Enumerable<newOrdersCreateWithoutNewClientsInput>, Enumerable<newOrdersUncheckedCreateWithoutNewClientsInput>>
    connectOrCreate?: Enumerable<newOrdersCreateOrConnectWithoutNewClientsInput>
    upsert?: Enumerable<newOrdersUpsertWithWhereUniqueWithoutNewClientsInput>
    createMany?: newOrdersCreateManyNewClientsInputEnvelope
    set?: Enumerable<newOrdersWhereUniqueInput>
    disconnect?: Enumerable<newOrdersWhereUniqueInput>
    delete?: Enumerable<newOrdersWhereUniqueInput>
    connect?: Enumerable<newOrdersWhereUniqueInput>
    update?: Enumerable<newOrdersUpdateWithWhereUniqueWithoutNewClientsInput>
    updateMany?: Enumerable<newOrdersUpdateManyWithWhereWithoutNewClientsInput>
    deleteMany?: Enumerable<newOrdersScalarWhereInput>
  }

  export type newClientsCreateNestedOneWithoutNewOrdersInput = {
    create?: XOR<newClientsCreateWithoutNewOrdersInput, newClientsUncheckedCreateWithoutNewOrdersInput>
    connectOrCreate?: newClientsCreateOrConnectWithoutNewOrdersInput
    connect?: newClientsWhereUniqueInput
  }

  export type productsCreateNestedOneWithoutNewOrdersInput = {
    create?: XOR<productsCreateWithoutNewOrdersInput, productsUncheckedCreateWithoutNewOrdersInput>
    connectOrCreate?: productsCreateOrConnectWithoutNewOrdersInput
    connect?: productsWhereUniqueInput
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type DecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type newClientsUpdateOneRequiredWithoutNewOrdersNestedInput = {
    create?: XOR<newClientsCreateWithoutNewOrdersInput, newClientsUncheckedCreateWithoutNewOrdersInput>
    connectOrCreate?: newClientsCreateOrConnectWithoutNewOrdersInput
    upsert?: newClientsUpsertWithoutNewOrdersInput
    connect?: newClientsWhereUniqueInput
    update?: XOR<newClientsUpdateWithoutNewOrdersInput, newClientsUncheckedUpdateWithoutNewOrdersInput>
  }

  export type productsUpdateOneRequiredWithoutNewOrdersNestedInput = {
    create?: XOR<productsCreateWithoutNewOrdersInput, productsUncheckedCreateWithoutNewOrdersInput>
    connectOrCreate?: productsCreateOrConnectWithoutNewOrdersInput
    upsert?: productsUpsertWithoutNewOrdersInput
    connect?: productsWhereUniqueInput
    update?: XOR<productsUpdateWithoutNewOrdersInput, productsUncheckedUpdateWithoutNewOrdersInput>
  }

  export type clientsCreateNestedOneWithoutOrdersInput = {
    create?: XOR<clientsCreateWithoutOrdersInput, clientsUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: clientsCreateOrConnectWithoutOrdersInput
    connect?: clientsWhereUniqueInput
  }

  export type clientsUpdateOneRequiredWithoutOrdersNestedInput = {
    create?: XOR<clientsCreateWithoutOrdersInput, clientsUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: clientsCreateOrConnectWithoutOrdersInput
    upsert?: clientsUpsertWithoutOrdersInput
    connect?: clientsWhereUniqueInput
    update?: XOR<clientsUpdateWithoutOrdersInput, clientsUncheckedUpdateWithoutOrdersInput>
  }

  export type newOrdersCreateNestedManyWithoutProductsInput = {
    create?: XOR<Enumerable<newOrdersCreateWithoutProductsInput>, Enumerable<newOrdersUncheckedCreateWithoutProductsInput>>
    connectOrCreate?: Enumerable<newOrdersCreateOrConnectWithoutProductsInput>
    createMany?: newOrdersCreateManyProductsInputEnvelope
    connect?: Enumerable<newOrdersWhereUniqueInput>
  }

  export type newOrdersUncheckedCreateNestedManyWithoutProductsInput = {
    create?: XOR<Enumerable<newOrdersCreateWithoutProductsInput>, Enumerable<newOrdersUncheckedCreateWithoutProductsInput>>
    connectOrCreate?: Enumerable<newOrdersCreateOrConnectWithoutProductsInput>
    createMany?: newOrdersCreateManyProductsInputEnvelope
    connect?: Enumerable<newOrdersWhereUniqueInput>
  }

  export type newOrdersUpdateManyWithoutProductsNestedInput = {
    create?: XOR<Enumerable<newOrdersCreateWithoutProductsInput>, Enumerable<newOrdersUncheckedCreateWithoutProductsInput>>
    connectOrCreate?: Enumerable<newOrdersCreateOrConnectWithoutProductsInput>
    upsert?: Enumerable<newOrdersUpsertWithWhereUniqueWithoutProductsInput>
    createMany?: newOrdersCreateManyProductsInputEnvelope
    set?: Enumerable<newOrdersWhereUniqueInput>
    disconnect?: Enumerable<newOrdersWhereUniqueInput>
    delete?: Enumerable<newOrdersWhereUniqueInput>
    connect?: Enumerable<newOrdersWhereUniqueInput>
    update?: Enumerable<newOrdersUpdateWithWhereUniqueWithoutProductsInput>
    updateMany?: Enumerable<newOrdersUpdateManyWithWhereWithoutProductsInput>
    deleteMany?: Enumerable<newOrdersScalarWhereInput>
  }

  export type newOrdersUncheckedUpdateManyWithoutProductsNestedInput = {
    create?: XOR<Enumerable<newOrdersCreateWithoutProductsInput>, Enumerable<newOrdersUncheckedCreateWithoutProductsInput>>
    connectOrCreate?: Enumerable<newOrdersCreateOrConnectWithoutProductsInput>
    upsert?: Enumerable<newOrdersUpsertWithWhereUniqueWithoutProductsInput>
    createMany?: newOrdersCreateManyProductsInputEnvelope
    set?: Enumerable<newOrdersWhereUniqueInput>
    disconnect?: Enumerable<newOrdersWhereUniqueInput>
    delete?: Enumerable<newOrdersWhereUniqueInput>
    connect?: Enumerable<newOrdersWhereUniqueInput>
    update?: Enumerable<newOrdersUpdateWithWhereUniqueWithoutProductsInput>
    updateMany?: Enumerable<newOrdersUpdateManyWithWhereWithoutProductsInput>
    deleteMany?: Enumerable<newOrdersScalarWhereInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedFloatWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedFloatFilter
    _min?: NestedFloatFilter
    _max?: NestedFloatFilter
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedDecimalFilter = {
    equals?: Decimal | DecimalJsLike | number | string
    in?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string>
    notIn?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string>
    lt?: Decimal | DecimalJsLike | number | string
    lte?: Decimal | DecimalJsLike | number | string
    gt?: Decimal | DecimalJsLike | number | string
    gte?: Decimal | DecimalJsLike | number | string
    not?: NestedDecimalFilter | Decimal | DecimalJsLike | number | string
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedDecimalWithAggregatesFilter = {
    equals?: Decimal | DecimalJsLike | number | string
    in?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string>
    notIn?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string>
    lt?: Decimal | DecimalJsLike | number | string
    lte?: Decimal | DecimalJsLike | number | string
    gt?: Decimal | DecimalJsLike | number | string
    gte?: Decimal | DecimalJsLike | number | string
    not?: NestedDecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter
    _avg?: NestedDecimalFilter
    _sum?: NestedDecimalFilter
    _min?: NestedDecimalFilter
    _max?: NestedDecimalFilter
  }

  export type ordersCreateWithoutClientsInput = {
    cakeId: number
    quantity: number
    createdAt?: Date | string
    totalPrice: number
  }

  export type ordersUncheckedCreateWithoutClientsInput = {
    id?: number
    cakeId: number
    quantity: number
    createdAt?: Date | string
    totalPrice: number
  }

  export type ordersCreateOrConnectWithoutClientsInput = {
    where: ordersWhereUniqueInput
    create: XOR<ordersCreateWithoutClientsInput, ordersUncheckedCreateWithoutClientsInput>
  }

  export type ordersCreateManyClientsInputEnvelope = {
    data: Enumerable<ordersCreateManyClientsInput>
    skipDuplicates?: boolean
  }

  export type ordersUpsertWithWhereUniqueWithoutClientsInput = {
    where: ordersWhereUniqueInput
    update: XOR<ordersUpdateWithoutClientsInput, ordersUncheckedUpdateWithoutClientsInput>
    create: XOR<ordersCreateWithoutClientsInput, ordersUncheckedCreateWithoutClientsInput>
  }

  export type ordersUpdateWithWhereUniqueWithoutClientsInput = {
    where: ordersWhereUniqueInput
    data: XOR<ordersUpdateWithoutClientsInput, ordersUncheckedUpdateWithoutClientsInput>
  }

  export type ordersUpdateManyWithWhereWithoutClientsInput = {
    where: ordersScalarWhereInput
    data: XOR<ordersUpdateManyMutationInput, ordersUncheckedUpdateManyWithoutOrdersInput>
  }

  export type ordersScalarWhereInput = {
    AND?: Enumerable<ordersScalarWhereInput>
    OR?: Enumerable<ordersScalarWhereInput>
    NOT?: Enumerable<ordersScalarWhereInput>
    id?: IntFilter | number
    clientId?: IntFilter | number
    cakeId?: IntFilter | number
    quantity?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    totalPrice?: FloatFilter | number
  }

  export type newOrdersCreateWithoutNewClientsInput = {
    quantity: number
    createdAt?: Date | string
    totalPrice: Decimal | DecimalJsLike | number | string
    products: productsCreateNestedOneWithoutNewOrdersInput
  }

  export type newOrdersUncheckedCreateWithoutNewClientsInput = {
    id?: number
    productsId: number
    quantity: number
    createdAt?: Date | string
    totalPrice: Decimal | DecimalJsLike | number | string
  }

  export type newOrdersCreateOrConnectWithoutNewClientsInput = {
    where: newOrdersWhereUniqueInput
    create: XOR<newOrdersCreateWithoutNewClientsInput, newOrdersUncheckedCreateWithoutNewClientsInput>
  }

  export type newOrdersCreateManyNewClientsInputEnvelope = {
    data: Enumerable<newOrdersCreateManyNewClientsInput>
    skipDuplicates?: boolean
  }

  export type newOrdersUpsertWithWhereUniqueWithoutNewClientsInput = {
    where: newOrdersWhereUniqueInput
    update: XOR<newOrdersUpdateWithoutNewClientsInput, newOrdersUncheckedUpdateWithoutNewClientsInput>
    create: XOR<newOrdersCreateWithoutNewClientsInput, newOrdersUncheckedCreateWithoutNewClientsInput>
  }

  export type newOrdersUpdateWithWhereUniqueWithoutNewClientsInput = {
    where: newOrdersWhereUniqueInput
    data: XOR<newOrdersUpdateWithoutNewClientsInput, newOrdersUncheckedUpdateWithoutNewClientsInput>
  }

  export type newOrdersUpdateManyWithWhereWithoutNewClientsInput = {
    where: newOrdersScalarWhereInput
    data: XOR<newOrdersUpdateManyMutationInput, newOrdersUncheckedUpdateManyWithoutNewOrdersInput>
  }

  export type newOrdersScalarWhereInput = {
    AND?: Enumerable<newOrdersScalarWhereInput>
    OR?: Enumerable<newOrdersScalarWhereInput>
    NOT?: Enumerable<newOrdersScalarWhereInput>
    id?: IntFilter | number
    clientId?: IntFilter | number
    productsId?: IntFilter | number
    quantity?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    totalPrice?: DecimalFilter | Decimal | DecimalJsLike | number | string
  }

  export type newClientsCreateWithoutNewOrdersInput = {
    name: string
    address: string
  }

  export type newClientsUncheckedCreateWithoutNewOrdersInput = {
    id?: number
    name: string
    address: string
  }

  export type newClientsCreateOrConnectWithoutNewOrdersInput = {
    where: newClientsWhereUniqueInput
    create: XOR<newClientsCreateWithoutNewOrdersInput, newClientsUncheckedCreateWithoutNewOrdersInput>
  }

  export type productsCreateWithoutNewOrdersInput = {
    name: string
    price: number
    description?: string | null
  }

  export type productsUncheckedCreateWithoutNewOrdersInput = {
    id?: number
    name: string
    price: number
    description?: string | null
  }

  export type productsCreateOrConnectWithoutNewOrdersInput = {
    where: productsWhereUniqueInput
    create: XOR<productsCreateWithoutNewOrdersInput, productsUncheckedCreateWithoutNewOrdersInput>
  }

  export type newClientsUpsertWithoutNewOrdersInput = {
    update: XOR<newClientsUpdateWithoutNewOrdersInput, newClientsUncheckedUpdateWithoutNewOrdersInput>
    create: XOR<newClientsCreateWithoutNewOrdersInput, newClientsUncheckedCreateWithoutNewOrdersInput>
  }

  export type newClientsUpdateWithoutNewOrdersInput = {
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
  }

  export type newClientsUncheckedUpdateWithoutNewOrdersInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
  }

  export type productsUpsertWithoutNewOrdersInput = {
    update: XOR<productsUpdateWithoutNewOrdersInput, productsUncheckedUpdateWithoutNewOrdersInput>
    create: XOR<productsCreateWithoutNewOrdersInput, productsUncheckedCreateWithoutNewOrdersInput>
  }

  export type productsUpdateWithoutNewOrdersInput = {
    name?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type productsUncheckedUpdateWithoutNewOrdersInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type clientsCreateWithoutOrdersInput = {
    name: string
    address: string
    phone: string
  }

  export type clientsUncheckedCreateWithoutOrdersInput = {
    id?: number
    name: string
    address: string
    phone: string
  }

  export type clientsCreateOrConnectWithoutOrdersInput = {
    where: clientsWhereUniqueInput
    create: XOR<clientsCreateWithoutOrdersInput, clientsUncheckedCreateWithoutOrdersInput>
  }

  export type clientsUpsertWithoutOrdersInput = {
    update: XOR<clientsUpdateWithoutOrdersInput, clientsUncheckedUpdateWithoutOrdersInput>
    create: XOR<clientsCreateWithoutOrdersInput, clientsUncheckedCreateWithoutOrdersInput>
  }

  export type clientsUpdateWithoutOrdersInput = {
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
  }

  export type clientsUncheckedUpdateWithoutOrdersInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
  }

  export type newOrdersCreateWithoutProductsInput = {
    quantity: number
    createdAt?: Date | string
    totalPrice: Decimal | DecimalJsLike | number | string
    newClients: newClientsCreateNestedOneWithoutNewOrdersInput
  }

  export type newOrdersUncheckedCreateWithoutProductsInput = {
    id?: number
    clientId: number
    quantity: number
    createdAt?: Date | string
    totalPrice: Decimal | DecimalJsLike | number | string
  }

  export type newOrdersCreateOrConnectWithoutProductsInput = {
    where: newOrdersWhereUniqueInput
    create: XOR<newOrdersCreateWithoutProductsInput, newOrdersUncheckedCreateWithoutProductsInput>
  }

  export type newOrdersCreateManyProductsInputEnvelope = {
    data: Enumerable<newOrdersCreateManyProductsInput>
    skipDuplicates?: boolean
  }

  export type newOrdersUpsertWithWhereUniqueWithoutProductsInput = {
    where: newOrdersWhereUniqueInput
    update: XOR<newOrdersUpdateWithoutProductsInput, newOrdersUncheckedUpdateWithoutProductsInput>
    create: XOR<newOrdersCreateWithoutProductsInput, newOrdersUncheckedCreateWithoutProductsInput>
  }

  export type newOrdersUpdateWithWhereUniqueWithoutProductsInput = {
    where: newOrdersWhereUniqueInput
    data: XOR<newOrdersUpdateWithoutProductsInput, newOrdersUncheckedUpdateWithoutProductsInput>
  }

  export type newOrdersUpdateManyWithWhereWithoutProductsInput = {
    where: newOrdersScalarWhereInput
    data: XOR<newOrdersUpdateManyMutationInput, newOrdersUncheckedUpdateManyWithoutNewOrdersInput>
  }

  export type ordersCreateManyClientsInput = {
    id?: number
    cakeId: number
    quantity: number
    createdAt?: Date | string
    totalPrice: number
  }

  export type ordersUpdateWithoutClientsInput = {
    cakeId?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    totalPrice?: FloatFieldUpdateOperationsInput | number
  }

  export type ordersUncheckedUpdateWithoutClientsInput = {
    id?: IntFieldUpdateOperationsInput | number
    cakeId?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    totalPrice?: FloatFieldUpdateOperationsInput | number
  }

  export type ordersUncheckedUpdateManyWithoutOrdersInput = {
    id?: IntFieldUpdateOperationsInput | number
    cakeId?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    totalPrice?: FloatFieldUpdateOperationsInput | number
  }

  export type newOrdersCreateManyNewClientsInput = {
    id?: number
    productsId: number
    quantity: number
    createdAt?: Date | string
    totalPrice: Decimal | DecimalJsLike | number | string
  }

  export type newOrdersUpdateWithoutNewClientsInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    totalPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    products?: productsUpdateOneRequiredWithoutNewOrdersNestedInput
  }

  export type newOrdersUncheckedUpdateWithoutNewClientsInput = {
    id?: IntFieldUpdateOperationsInput | number
    productsId?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    totalPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type newOrdersUncheckedUpdateManyWithoutNewOrdersInput = {
    id?: IntFieldUpdateOperationsInput | number
    productsId?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    totalPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type newOrdersCreateManyProductsInput = {
    id?: number
    clientId: number
    quantity: number
    createdAt?: Date | string
    totalPrice: Decimal | DecimalJsLike | number | string
  }

  export type newOrdersUpdateWithoutProductsInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    totalPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    newClients?: newClientsUpdateOneRequiredWithoutNewOrdersNestedInput
  }

  export type newOrdersUncheckedUpdateWithoutProductsInput = {
    id?: IntFieldUpdateOperationsInput | number
    clientId?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    totalPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}